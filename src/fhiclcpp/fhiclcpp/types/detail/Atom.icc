#include "fhiclcpp/detail/printing_helpers.h"
#include "fhiclcpp/types/detail/strip_containing_names.h"

namespace fhicl {

  template <typename T>
  Atom<T>::Atom(Name&& name,
                Comment&& comment)
    : AtomBase{std::move(name), std::move(comment), par_style::REQUIRED, detail::AlwaysUse()}
    , RegisterIfTableMember{this}
    , value_{std::make_shared<T>()}
  {
    NameStackRegistry::end_of_ctor();
  }

  template <typename T>
  Atom<T>::Atom(Name&& name,
                Comment&& comment,
                std::function<bool()> maybeUse)
    : AtomBase{std::move(name), std::move(comment), par_style::REQUIRED_CONDITIONAL, maybeUse}
    , RegisterIfTableMember{this}
    , value_{std::make_shared<T>()}
  {
    NameStackRegistry::end_of_ctor();
  }

  template <typename T>
  Atom<T>::Atom(Name&& name,
                Comment&& comment,
                T const& dflt_value)
    : AtomBase{std::move(name), std::move(comment), par_style::DEFAULT, detail::AlwaysUse()}
    , RegisterIfTableMember{this}
    , value_{std::make_shared<T>(dflt_value)}
  {
    NameStackRegistry::end_of_ctor();
  }

  template <typename T>
  Atom<T>::Atom(Name&& name,
                Comment&& comment,
                std::function<bool()> maybeUse,
                T const& dflt_value)
    : AtomBase{std::move(name), std::move(comment), par_style::DEFAULT_CONDITIONAL, maybeUse}
    , RegisterIfTableMember{this}
    , value_{std::make_shared<T>(dflt_value)}
  {
    NameStackRegistry::end_of_ctor();
  }

  template <typename T>
  Atom<T>::Atom(Name&& name)
    : Atom{std::move(name), Comment("")}
  {}

  template <typename T>
  Atom<T>::Atom(Name&& name, T const& dflt_value)
    : Atom{std::move(name), Comment(""), dflt_value}
  {}

  template <typename T>
  std::string
  Atom<T>::get_stringified_value() const
  {
    std::stringstream oss;
    if (has_default()) {
      using namespace detail::yes_defaults;
      oss << maybe_quotes<T>(*value_) ;
    }
    else {
      using namespace detail::no_defaults;
      oss << expected_types<T>();
    }
    return oss.str();
  }

  template <typename T>
  void
  Atom<T>::do_set_value(fhicl::ParameterSet const& pset, bool const trimParent)
  {
    std::string const& rkey = key();
    std::string const& key = trimParent ? detail::strip_first_containing_name(rkey) : rkey;

    if (has_default())
      pset.get_if_present<T>(key, *value_);
    else
      value_ = std::make_shared<T>(pset.get<T>(key));
  }

}

// Local variables:
// mode: c++
// End:
