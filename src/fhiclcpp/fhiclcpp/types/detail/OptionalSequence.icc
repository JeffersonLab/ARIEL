#include "fhiclcpp/detail/printing_helpers.h"

namespace fhicl {

  //==================================================================
  // e.g. OptionalSequence<int,4> ====> std::array<int,4>
  //
  template<typename T, std::size_t N>
  OptionalSequence<T,N>::OptionalSequence(Name&& name)
    : OptionalSequence{std::move(name), Comment("")}
  {}


  template<typename T, std::size_t N>
  OptionalSequence<T,N>::OptionalSequence(Name&& name,
                                          Comment&& comment)
    : SequenceBase{std::move(name), std::move(comment), par_style::OPTIONAL, par_type::SEQ_ARRAY, detail::AlwaysUse()}
    , RegisterIfTableMember{this}
    , value_{{nullptr}}
  {
    for (std::size_t i{}; i != N; ++i) {
      value_.at(i) = std::make_shared<tt::fhicl_type<T>>(Name::sequence_element(i) );
    }
    NameStackRegistry::end_of_ctor();
  }

  template<typename T, std::size_t N>
  OptionalSequence<T,N>::OptionalSequence(Name&& name,
                                          Comment&& comment,
                                          std::function<bool()> maybeUse)
    : SequenceBase{std::move(name), std::move(comment), par_style::OPTIONAL_CONDITIONAL, par_type::SEQ_ARRAY, maybeUse}
    , RegisterIfTableMember{this}
    , value_{{nullptr}}
  {
    for (std::size_t i{}; i != N; ++i) {
      value_.at(i) = std::make_shared<tt::fhicl_type<T>>(Name::sequence_element(i) );
    }
    NameStackRegistry::end_of_ctor();
  }

  template<typename T, std::size_t N>
  void
  OptionalSequence<T,N>::do_set_value(fhicl::ParameterSet const&,
                                      bool const /*trimParents*/)
  {
    // We do not explicitly set the sequence values here as the
    // individual elements are set one at a time.  However, this
    // function is reached in the ValidateThenSet algorithm if the
    // optional parameter is present.  Otherwise, this override is
    // skipped.
    has_value_ = true;
  }


  //==================================================================
  // e.g. OptionalSequence<int> ====> std::vector<int>
  //

  template<typename T>
  OptionalSequence<T,-1ull>::OptionalSequence(Name&& name)
    : OptionalSequence{std::move(name), Comment("")}
  {}

  template<typename T>
  OptionalSequence<T,-1ull>::OptionalSequence(Name&& name,
                                           Comment&& comment)
    : SequenceBase{std::move(name), std::move(comment), par_style::OPTIONAL, par_type::SEQ_VECTOR, detail::AlwaysUse()}
    , RegisterIfTableMember{this}
  {
    value_.emplace_back(new tt::fhicl_type<T>{Name::sequence_element(0ul)});
    NameStackRegistry::end_of_ctor();
  }

  template<typename T>
  OptionalSequence<T,-1ull>::OptionalSequence(Name&& name,
                                              Comment&& comment,
                                              std::function<bool()> maybeUse)
    : SequenceBase{std::move(name), std::move(comment), par_style::OPTIONAL_CONDITIONAL, par_type::SEQ_VECTOR, maybeUse}
    , RegisterIfTableMember{this}
  {
    value_.emplace_back(new tt::fhicl_type<T>{Name::sequence_element(0ul)});
    NameStackRegistry::end_of_ctor();
  }

  template<typename T>
  void
  OptionalSequence<T,-1ull>::do_set_value(fhicl::ParameterSet const&,
                                       bool const /*trimParents*/)
  {
    // We do not explicitly set the sequence values here as the
    // individual elements are set one at a time.  However, this
    // function is reached in the ValidateThenSet algorithm if the
    // optional parameter is present.  Otherwise, this override is
    // skipped.
    has_value_ = true;
  }

}

// Local variables:
// mode: c++
// End:
