===================
art parameter names
===================

This document was last updated 1 September 2011
to reflect **art** version 0.7.13.

Purpose of this document
========================

This document describes
the parameter names
that are meaningful to the **art** framework.
These should be distinguished
from the parameter names
that are meaningful
to modules and services
developed by an experiment.

Parameter values with an expected type of *table*
appear in **art** as objects of type *fhicl::ParameterSet*.
See the documentation for the FHiCL language,
and for the C++ binding for FHiCL,
for a description of how the parameter values
associated with these parameter names
are available to C++ programs.

Top-level names
===============

*Top-level* names are the names
that appear directly in the configuration document,
and are not nested within any other structure.

============ ==============
name         expected type
============ ==============
outputs      table
physics      table
process_name string
services     table
source       table
============ ==============

Names in the *services* table
=============================

The *services* table
is used to configure
all the services in an **art** program.
Services known to the **art** framework itself
are configured by parameters named in this table;
services supplied by experiments are configured
by parameters in the contained table named *user*.
The suggested type for those parameters
is *table*.

====================== =====
name                   expected type
====================== =====
floating_point_control table
messages               table
RandomNumberGenerator  table
scheduler              table
SimpleMemoryCheck      table
TFileService           table
user                   table
====================== =====

Names in the *scheduler* table
------------------------------

These parameters are mostly used to control
the behavior of the portions of the framework
that deal with control-of-flow
(i.e., the *EventProcessor* and *Schedule* classes).

==================== ============== =============
name                 expected type  default value
==================== ============== =============
enableSigInt         bool           true
fileMode             string         ""
handleEmptyRuns      bool           true
handleEmptySubRuns   bool           true
resetRootErrHandler  bool           true
unloadRootSigHandler bool           true
wantTracer           bool           false
[action name]        vector<string> empty
==================== ============== =============

The list of recognized *action names* is taken from *art::actions::<anon>::ActionNames*.
It includes the following:

 * FailModule
 * FailPath
 * IgnoreCompletely
 * Rethrow
 * SkipEvent

The *vector<string>* value expected for each of these parameter names
is the list of *art::errors::ErrorCodes* values
for which the named action is to be taken.

Names in the *messages* table
-----------------------------

The *messages* table is used
to configure the *messagefacility* system,
which is beyond the scope of this document.

Names in the *source* table
===========================

The *source* table is used to configure
the main source of event data input
for the program.
The contents required differ according to the module type
being configured.

If no *source* table is specified,
an *EmptySource* configured to deliver one event is constructed.
If a *source* table is specified,
the only parameter required
names the type of source to be used.

============ ==============
name         expected type
============ ==============
module_type  string
============ ==============

Names in the *physics* table
============================

The entries in the *physics* table
control the actual work done by the program.
The *analyzers*, *filters*, *outputs* and *producers*  tables
are used to define the names of modules instances of each of the given categories
that are to be created,
and to specify their configurations.
The vectors *trigger_paths* and *end_paths*
are used to identify which is the variety of each "path".
Any other name is assumed to be the name of a "path";
the vector associated with each name
is the sequence of names of modules
that form that "path".
Each "path" must be identified as either a *trigger_path*
or an *end_path*,
by putting the name of the path into the appropriate vector.

============= ==============
name          expected type
============= ==============
analyzers     table
filters       table
producers     table
trigger_paths vector<string>
end_paths     vector<string>
[path name]   vector<string>
============= ==============

Names in the *outputs* table
============================

The entries in the *outputs* table configure the output system.
Each parameter name in the *outputs* table is a "module label".
The table associated with that name
carries the configuration parameters of the output module
which is created and given that label.

============== ==============
name           expected type
============== ==============
[module label] table
============== ==============

