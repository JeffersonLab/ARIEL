===========================================
Design Notes for Module and Service Plugins
===========================================

Modules are EDProducers, EDFilters, EDAnalyzers, OutputModules and
Sources.

**NOTE**: we may be moving to a very different i/o system, that will
make much of the current OutputModules and Sources irrelevant.

When the framework executable starts up, the class names for the
modules and services to be loaded are obtained from the configuration.
A module *Factory* is used to create the modules.

Factory
=======

For a given module, the configuration will announce:

#. what type of module it is (EDProducer, EDFilter, ...)
#. what the name of the class is (IntProducer);
   the class name lacks all namespace qualification

The framework calls upon a *Factory* singleton instance to create an
instance of the correct class::

   auto_ptr<EDProducer> Factory::makeEDProducer(string const& typespec,
                                                ParameterSet const& config);
   auto_ptr<EDFilter> Factory::makeEDFilter(string const& typespec,
                                            ParameterSet const& config);
   ...


The string *typespec* is the string provided in the user's
configuration of the framework. It determines the concrete module class to be
instantiated, and can appear in two forms:

#. Long form *typespec*, like "test/Framework/Core/stubs/IntProducer".

#. Short form *typespec*, like "IntProducer"

The *Factory* is responsible for

#. Accepting registration of *factory functions*, given a short form
   and long form name associated with the *factory function*.

#. Mapping the given *typespec* to the appropriate *factory function*,
   or throwing an informative exception if the mapping is either ambiguous
   or no matching function can be found.

#. Invoking the the *factory function* to create and return the requested
   module.

It is possible for a short form *typespec* to map to more than one long form;
an exception should be thrown only if an ambiguous lookup is attempted.

It is an error to register more than one *factory function* for any
long form name; the attempt to do so should result in an informative
exception being thrown.

Before it is used to create modules,
the *Factory* must be loaded with the appropriate *factory* *functions*.
This is done with the help of the *LibraryManager*.

LibraryManager
==============

The *LibraryManager* is the class used to load dynamic libraries
containing the implementation of modules
and of services.

The *LibraryManager* is responsible for scanning ``LD_LIBRARY_PATH``
to find all dynamic libraries with names matching the file glob
"\*_plugin.<suffix>", where <suffix> is the suffix used to identify
dynamic libraries on the system in question.  It is not an error if
one of those directories does not exist.

The *LibraryManager* delays loading each library until it is asked
to resolve a symbol in that library.
The *LibraryManager* loads libraries using *dlopen*,
and provides access to plugins by "short name" and "long name" (see above).
A plugin with filename ``a/b/c/libd_plugin.<suffix>`` is associated with the
long form name ``a/b/c/d`` and with the short form name ``d``.

The *LibraryManager* is responsible for giving access to any symbol in
a loaded library, given the (long or short form) name of the library
and the name of the symbol. The symbol is returned as a ``void*``, and
it is up to the user of the symbol to understand what the underlying
type really is.

The *LibraryManager* should not provide any facility for unloading
libraries, which is not safe in a C++ program.

Plugins
=======

Each module class must be defined in its own dynamic library, which
must be named ``lib_<module>_plugin.<suffix>``, where *<suffix>* is
whatever is appropriate for the platform; these are called *plugin*
libraries.

Plugin libraries are loaded by the *LibraryManager*; see above.

The source file in which a module is implemented must be named
``<module>_plugin.cc``. It must contain an invocation of the
*DEFINE_EDM_PLUGIN* macro.

The *DEFINE_EDM_PLUGIN* macro is responsible for writing the
appropriate *factory* *function*.

FactoryFunctions
================

The *factory* *function* is an ``extern "C"`` function named
make, and that takes a const reference to a *ParameterSet* and that
returns a newly-created instance of the associated module type,
initialized with the given *ParameterSet*, and wrapped in a smart
pointer to the appropriate module base class (e.g. *EDProducer*,
*EDFilter*, etc.)::

  extern "C" { std::auto_ptr<type> make(ParameterSet const&); }


*EVERYTHING BELOW THIS POINT IS SUBJECT TO CHANGE*

Interfaces
==========

*Factory*::

  EDProducer* makeProducer(string spec, ParameterSet p);
  EDFilter* makeFilter(string spec, ParameterSet p);
  EDAnalyzer* makeAnalyzer(string spec, ParameterSet p);



*LibraryManager*::

  explicit LibraryManager(string pattern);
  void* getSymbol(string spec, string symbol);
  void getLoadableLibraries(string type, vector<string>& libnames);

The c'tor must search through LD_LIBRARY_PATH and find all libraries
with a name matching "pattern"::

  EDProducer* Factory::makeProducer(string spec, ParameterSet p)
  {
    MakerFcn mf* = (MakerFcn*)libman.getSymbol(spec, "makeEDProducer");
    return mf==0 ? 0 : (*mf)(p);
  }


Current Services' Qualities
===========================

All qualities are boolean.  Here is the meaning of them:
 * C = configuration can be given
 * A = activity registry is needed for construction
 * P = public interface is provided
 * O = optional service
 * D = output to console, files per event or module (not edm datafile)

=========================== =  =  =  =  =
Type                        C  A  P  O  D
=========================== =  =  =  =  =
CurrentModule . . . . . . . N  Y  Y  N  N
FloatingPointControl  . . . Y  Y  N  N  N
RandomNumberGenerator . . . Y  Y  Y  Y  Y
SimpleMemoryCheck . . . . . Y  Y  N  Y  Y
TFileService  . . . . . . . Y  Y  Y  Y  Y
Timing  . . . . . . . . . . Y  Y  N  Y  Y
Tracer  . . . . . . . . . . N  Y  N  Y  Y
InitRootHandlers  . . . . . Y  N  N  Y  N
LoadAllDictionaries . . . . N  N  N  Y  N
UnixSignalService . . . . . Y  N  N  N  N
=========================== =  =  =  =  =


The last three are really functions:

UnixSignalService replacement -

 #include "art/Utilities/UnixSignalhandlers.h"

 art::setupSignals(pset.get<bool>("enableSigInt",true));

LoadAllDictionaries replacement -

 #include "art/Utilities/LoadAllDictionaries.h"

 if(pset.get<bool>("doLoad",true))
   art::loadAllDictionaries();

InitRootHandlers replacement -

 #include "art/Persistency/Common/InitRootHandlers.h"

 if(pset.get<bool>("unloadRootSigHandler",false))
   art::unloadRootSigHandler();

 art::setRootErrorHandler(pset.get<bool>("resetRootErrHandler",true));
 art::completeRootHandlers(pset.get<bool>("autoLibraryLoader",true));

 // run the event processor here..

 art::setRootErrorHandler(false);


API for accessing service parameters sets
=========================================

typedef std::vector<fhicl::ParameterSet> ParameterSets;
ServiceRegistry* inst = ServiceRegistry::instance();
ParameterSets psets;

inst->presentToken()->getParameterSets(psets);

for(ParameterSets::iterator cur=psets.begin(),end=fillme.end();
			    cur!=end;++cur)
{
 cout << "service name = " << cur->get<std::string>("service_type") <<
			    "\n";
 cur->put<int>("DebugLevel",10);
}

inst->presentToken()->putParameterSets(psets);

