==================================
Guidelines for the Use of Pointers
==================================

:date:   2007/02/07
:author: Marc Paterno <paterno@fnal.gov>

.. contents::

Those interested in only the most brief summary
are encouraged to skip to the `Summary`_.


Overview and Purpose
====================

This document provides guidelines for the use of pointers
and "smart pointer" templates
in art-based software.
It is intended to help you choose the best type of "pointer"
for whatever problem you are solving.
For the rest of this document,
the word *pointer* should be understood to include *bare pointers*
and all sorts of *smart pointers*.

The most important guideline is:

.. topic:: Guideline #1

  Say what you mean, and mean what you say.

This means that you should use the pointer type that most directly conveys
the purpose of the code.
Writing your code so that it
*clearly expresses your intent*
takes little extra effort,
and pays large dividends in the future.
The lifetime of an experiment is quite long.
The code you write today
is likely to be read --- and modified ---
by you or by someone else
many months or years from now.
If you use a pointer type that does not express the right intent,
that later reader is likely to mistake the purpose,
and modify your code incorrectly.
The resulting coding errors are often very difficult to debug.
A small amount of effort used to select the right type
can prevent such troubles.

This is explained in more detail below.

Pointer Types
=============

Smart pointer types are usually written as *class templates*,
so that instances can be created to point to objects of various types.
Smart pointer types differ in their behavior.
All support *dereferencing* and *member selection*.
The code below shows the common (but not universal) interface::

  // pointer_type is not a real class template; it stands in for
  // any of the real class templates named below...
  pointer_type<X> p(...);         // construction methods vary
  X& xref = *p;                   // dereference
  X* xptr = p.operator->();       // member selection, abnormal use
  p->someMemberFunctionOfTypeX(); // member selection, normal use

The Standard Library (ISO C++2011) provides several smart pointer types,
available from ``<memory>``:

* ``std::auto_ptr<T>``, inherited from C++03 (deprecated)
* ``std::unique_ptr<T>``
* ``std::shared_ptr<T>``
* ``std::weak_ptr<T>``

The Boost_ library, which may be used freely by any software project based on art,
contains several other pointer class templates:

* ``boost::unique_ptr<T>`` from ``"boost.unique_ptr.hpp"`` (see note) 
* ``boost::shared_ptr<T>`` from ``"boost/shared_ptr.hpp"`` (see note) 
* ``boost::weak_ptr<T>`` from ``"boost/weak_ptr.hpp"`` (see note) 
* ``boost::scoped_ptr<T>`` from ``"boost/scoped_ptr.hpp"``
* ``boost::intrusive_ptr<T>`` from ``"boost/intrusive_ptr.hpp"``

(Note: these pointers are now implemented in the standard library as of
ISO C++2011. Use the SL versions in prefernece to the Boost ones).

Also, The art suite includes two other smart pointer types:

* ``cet::value_ptr<T>`` from  ``"cetlib/value_ptr.h"``
* ``cet::exempt_ptr<T>`` from ``"cetlib/exempt_ptr.h"``

The similarly-named smart pointers in STL and the Boost library have the
same meaning and use.

For ``scoped_ptr`` and ``shared_ptr``, there are also *array* forms.
Since C++ code should rarely use arrays
(``std::vector`` is usually preferred)
we make no further mention of these array forms.

The key issue regarding choice of pointer type
is the issue of *resource ownership*.
The answer to the question
"Who is responsible for managing the memory for the pointed-to object?"
most often dictates the choice of pointer type to be used.

Each pointer type mentioned above has a different policy regarding ownership.
Please note below the difference between a *pointer object*
(an instance of the pointer class)
and a *pointed-to object*
(the object *to which* a pointer object points).

Bare pointer:
  Bare pointers convey *no* sense of ownership. Their use should be rare.

``std::unique_ptr<T>``:
  ``unique_ptr`` conveys *sole ownership* of the object. A
  ``unique_ptr`` may *not* be copied, but its contents may be
  transferred to another ``unique_ptr``using C++2011 *move
  semantics*. After the contents of a ``unique_ptr`` have been passed on
  (e.g. by calling a function that takes a ``std::unique_ptr<T> &&``),
  the remaining ``unique_ptr` is empty, no longer having a pointer to
  the previously-contained object. Note that the above example function
  prototype specifies a ``&&``, or *r-value reference*: an unnamed
  temporary is naturally an r-value reference. A named variable must be
  converted to a r-value reference *at the site of the call* by using
  ``std::move()``. For example, when putting an object into the ``art::Event``:

  std::unique_ptr<MyProduct> myProdPtr(new MyProduct(...));
  // Do stuff to product.
  event.put(std::move(myProdPtr)); // myProdPtr is now empty.

  The use ``std::move()`` serves as documentation that the
  ``unique_ptr`` has been transferred and the original is now empty. It
  may be destroyed safely or assgined to and re=used.

  ``unique_ptr`` is also useful in implementing functions which return
  an object allocated on the heap (that is, allocated with ``new``).  If
  the function in question returns the newly-created object via an
  ``unique_ptr``, this makes sure that code that *calls* this function
  takes ownership of the newly-created object.  With such an
  implementation, even code that fails to accept the newly-created
  object does not cause a memory leak; the unnamed ``unique_ptr`` object
  is immediately deleted, which then deletes the pointed-to object.

``std::auto_ptr<T>``:
  ``auto_ptr`` also conveys *sole ownership*. However, ownership is
  transferred by copying, not move semantics. The act of copying an
  ``auto_ptr`` empties the original. In C++2011, the use of ``auto_ptr``
  is deprecated in favor of ``std::unique_ptr``, which has better
  alignment of syntax and semantics.

``std::shared_ptr<T>``, ``boost::shared_ptr<T>``:
  ``shared_ptr<T>`` implements *shared ownership*. Copies of a ``shared_ptr``
  object share control of the pointed-to object.
  ``shared_ptr`` should be used whenever shared ownership is desired.
  It should *not* be used when shared ownership is *not* desired;
  in some code it could be surprising --- or even disastrous --- for an
  object to be shared between many owners. Try ``value_ptr`` (below)
  in such a case.

``std::weak_ptr<T>``, ``boost::weak_ptr<T>``:
   ``weak_ptr`` is provided to give *shared access* with *no ownership*
   to an object which is managed through a ``shared_ptr``.
   Its correct use is fairly subtle,
   and it should rarely be needed. It is chiefly used to break cyclic
   references to objects.

``boost::scoped_ptr<T>``:
   ``scoped_ptr`` implements *sole ownership*, with the restriction that
   the ``scoped_ptr`` object itself *can not be copied*.
   If you want a pointer that is to be the only owner for some other object,
   and makes sure that the pointer is not copied,
   so that no other pointer refers to the same object *and*
   your pointer never gives up its object to control by another object,
   then ``scoped_ptr`` is the correct choice.

``boost::intrusive_ptr<T>``:
   ``intrusive_ptr`` is very similar to ``shared_ptr``. They differ in
   that ``intrusive_ptr`` can only be used to point to an object with
   an embedded reference count. Its use will be rare.
   Quoting from the ``intrusive_ptr`` documentation: "As a general rule,
   if it isn't obvious whether ``intrusive_ptr`` better fits your needs
   than ``shared_ptr``, try a ``shared_ptr``-based design first."

``cet::value_ptr<T>``:
   ``value_ptr`` implements *sole ownership*. Copying a ``value_ptr``
   causes a copy of the pointed-to object to be created. This makes
   ``value_ptr`` useful for managing class data members when the
   shared ownership of ``shared_ptr`` is inappropriate.

``cet::exempt_ptr<T>``:
  ``exempt_ptr`` *explicitly does not own* the memory associated with
  its conained pointer. Use in preference to a bare pointer to make it
  clear that the receiver of an ``exempt_ptr`` does not own its
  pointed-to object.

Usage Guidelines
================

For local use in functions
--------------------------

Most often, objects which are local to functions
should not be ``new``'d.
Thus, no pointer is needed::

  void f() {
    SomeType  s; // create it on the stack
    ...   use the object s ...
  } // s destroyed on function exit

The stack-based allocation of the object ``s``
assures that it will not be "leaked".
The following code is never appropriate::

   void bad_f() {
     SomeType* s = new SomeType(...); // create it on the heap
     ...  use the object pointed to by s ...
     delete s;
   }

Even though this code calls ``delete`` on ``s``,
it is still poorly-written.
If the code represented by the ellipsis returns prematurely
(either by calling ``return``, or throwing an exception,
or by calling something that throws an exception)
then the ``SomeType`` object pointed to by ``s`` will be leaked.
Even if the code written today does not have any chance of doing so,
it is still poorly-written, because it is fragile.
Changes made at a later date may invalidate the statement
that the code can not return prematurely,
and every modification to this code
must be checked carefully to make sure that the object
pointed to by ``s`` can not be leaked.

.. topic:: Guideline #2

   Prefer to put local objects on the stack.

Less often, heap-based allocation is needed.
Some of these cases include:

1. Creation of an *optional* object, that is,
   an object that might be made,
   but also might *not* be made.

2. Creation of a pointer-to-base that will be initialized to point to some
   derived type

3. Creation of a very large object, one that would require an unreasonable
   amount of stack space.

In such cases, a pointer of some type is appropriate.
**In none of the cases listed above is a bare pointer appropriate!**

To choose the correct pointer type,
consider the issues of *ownership* and the intended semantics of *copying*.
Ask the following questions:

1. Does it make sense to copy the pointer object?

   If it does not, then use ``scoped_ptr``. This will prevent your
   pointer from being copied accidentally.

2. If it makes sense to copy the pointer, should the copied pointer
   *share control of the pointed-to object*?

   If so, then use ``shared_ptr``. (If your object already has an embedded
   reference count, then use ``intrusive_ptr``.)

3. If it makes sense to copy the pointer, should the act of copying *transfer
   ownership* to the new pointer?

   If so, then use ``auto_ptr``. This is useful in functions that are
   "sources" (that is, *factory functions*), to indicate that ownership of
   the created object that is returned by the call is given to the caller.
   It is useful in functions that are "sinks" (such as ``art::Event::put``),
   to indicate that the called function is taking control of the passed
   object.

4. If it makes sense to copy the pointer, should the copy manage its own
   copy of the pointed-to object?

   If so, then use ``value_ptr``. Copying a ``value_ptr`` creates a
   *deep copy* of the pointed-to object.

.. topic:: Guideline #3

   Use a pointer type only when necessary.
   Choose the type of pointer after considering *object ownership* and
   *copying semantics*.

For class data members
----------------------

Please refer to EDM documentation
for special issues regarding design of classes used as ``EDProducts``.
Such classes are subject to restrictions
imposed by the art Event Data Model
and the persistency system.

It is very rarely correct to have a class contain a bare pointer as a
data member. [#]_ This is because a bare pointer does not convey any
sense of *ownership*.

Most data members of a class should be held by *value*,
rather than by *pointer*.
But the same conditions as above apply to data members;
one may need a pointer because the data members is *optional*,
or because only the type of a *base class* is known,
or because the member object is *very large*,
or when using the *pimpl technique*. [#]_
In such a case, a pointer data member is appropriate.

To choose the correct pointer type for a data member,
consider the behavior of the *copy constructor* of the class you are writing.
The goal is to make the compiler-generated copy constructor be correct.
Ask the same questions regarding *ownership* and *copying semantics* as given above,
and choose the pointer type to use following those criteria.
The benefits of having the compiler-generated copy constructor be correct
are several and important:

1. The compiler-generated copy constructor is often optimally efficient.

2. The resulting class is easier to maintain. If and when data members are
   added at some later date, there is no chance of forgetting to update
   the copy constructor. Erroneous copy constructors often lead to
   extremely subtle bugs.

3. If the compiler-generated copy constructor is correct,
   the compiler-generated assignment operator and destructor are
   often correct. Thus there are two additional functions that do
   not need maintenance under changes in the class, and which can
   not get "out of sync" with the design of the class.

4. Using the compiler-generated copy constructor is self-documenting.


Summary
=======

The following table summarizes the guidelines in this document. In all
the below, ``T`` represents the type *pointed to* by the given pointer
type.

=================  =========  ==============  ==========================
Pointer type       Ownership  Move / Copy     Example uses
=================  =========  ==============  ==========================
``T*``             none       shallow         should be rare, especially
                                              as class data

``unique_ptr<T>``  sole       move-transfer   return newly created object;
                                              pass ownership into called
                                              function

``auto_ptr<T>``    sole       copy-transfer   Deprecated: use
                                              unique_ptr<T> instead.

``shared_ptr<T>``  shared     shallow         wherever shared ownership
                                              is needed, but not where
                                              shared ownership is
                                              inappropriate.
                                              Inappropriate use can
                                              obfuscate correct
                                              ownership and contribute
                                              to fragile code.

``weak_ptr<T>``    none       shallow         Use is subtle. When one of
                                              these looks suitable,
                                              cet::exempt_ptr<T> is
                                              probably more appropriate.


``scoped_ptr<T>``  sole       not allowed     object created locally in function;
                                              data member for class that should not
                                              be copyable.

``value_ptr<T>``   sole       deep            "polymorphic" data member; keep pointer
                                              to base class, but do not share the
                                              instance you point to with others.

``exempt_ptr<T>``  none       shallow         Use as necessary to convey
                                              the information that the
                                              memory pointed to is *not* owned.
=================  =========  ==============  ========================================



----


.. _boost: http://www.boost.org

.. [#] An obvious exception is in smart pointer class templates themselves.

.. [#] The *pimpl* technique, sometimes called the *compiler firewall*
       or *letter-envelope* technique,
       can be used to make private members of a class truly invisible.
       See **C++ Coding Standards**, by Sutter and Alexandrescu, Item 43.
