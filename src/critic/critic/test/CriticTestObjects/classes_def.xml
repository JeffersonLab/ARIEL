<lcgdict>
  <class name="arttest::IntProduct" ClassVersion="10">
    <version ClassVersion="10" checksum="3673612331"/>
  </class>
  <class name="arttest::CompressedIntProduct" ClassVersion="10">
    <version ClassVersion="10" checksum="1683733468"/>
  </class>
  <class name="arttest::Int16_tProduct" ClassVersion="12">
    <version ClassVersion="12" checksum="3993725207"/>
    <version ClassVersion="11" checksum="3307058658"/>
    <version ClassVersion="10" checksum="3993725207"/>
  </class>
  <class name="arttest::DoubleProduct" ClassVersion="10">
    <version ClassVersion="10" checksum="680393965"/>
  </class>
  <class name="arttest::Simple" ClassVersion="10">
    <version ClassVersion="10" checksum="3883226735"/>
  </class>
  <class name="arttest::SimpleDerived" ClassVersion="11">
    <version ClassVersion="11" checksum="2754341086"/>
    <version ClassVersion="10" checksum="3838878701"/>
  </class>
  <class name="arttest::Sortable" ClassVersion="10">
    <version ClassVersion="10" checksum="4007300496"/>
  </class>
  <class name="arttest::MockCluster" ClassVersion="10">
    <version ClassVersion="10" checksum="448456917"/>
  </class>
  <class name="arttest::MockClusterList"/>
  <class name="arttest::AssnTestData" ClassVersion="10">
    <version ClassVersion="10" checksum="171613676"/>
  </class>
  <class name="arttest::NonPersistable" persistent="false"/>
  <class name="arttest::PtrToNonPersistable" persistent="false"/>
  <class name="arttest::ProductWithPtrs"/>
  <class name="arttest::VSimpleProduct"/>
  <class name="arttest::Hit" ClassVersion="10">
    <version ClassVersion="10" checksum="3431343910"/>
  </class>
  <class name="arttest::Track" ClassVersion="10">
    <version ClassVersion="10" checksum="2684140494"/>
  </class>
  <class name="arttest::StringProduct" ClassVersion="10">
    <version ClassVersion="10" checksum="2490572624"/>
  </class>

  <class name="art::Assns<arttest::Hit, arttest::Track, void>"/>
  <class name="art::Assns<std::string, size_t, arttest::AssnTestData>"/>
  <class name="art::Assns<std::string, size_t, std::string>"/>
  <class name="art::Assns<std::string, size_t, void>"/>
  <class name="art::Assns<size_t, std::string, arttest::AssnTestData>"/>
  <class name="art::Assns<size_t, std::string, std::string>"/>
  <class name="art::Assns<size_t, std::string, void>"/>
  <class name="art::Assns<arttest::Track, arttest::Hit, void>"/>
  <class name="art::Ptr<double>"/>
  <class name="art::Ptr<arttest::Simple>"/>
  <class name="art::Ptr<arttest::SimpleDerived>"/>
  <class name="art::Ptr<std::string>"/>
  <class name="art::Ptr<cet::map_vector<unsigned int>::value_type>"/>
  <class name="art::Ptr<unsigned long>"/>
  <class name="art::PtrVector<double>"/>
  <class name="art::PtrVector<arttest::SimpleDerived>"/>
  <class name="art::PtrVector<arttest::Simple>"/><!-- For view<Simple> -->
  <class name="art::PtrVector<cet::map_vector<std::string>::value_type>"/>
  <class name="art::PtrVector<std::string>"/>
  <class name="cet::map_vector<std::string>::value_type"/>
  <class name="cet::map_vector<std::string>::impl_type"/>
  <class name="cet::map_vector<unsigned int>" mapped_type="unsigned int"/>
  <class name="cet::map_vector<unsigned int>::value_type"/>
  <class name="cet::map_vector<unsigned int>::impl_type"/>

  <class name="std::pair<art::Ptr<unsigned long>, art::Ptr<std::string>>"/>
  <class name="std::pair<art::Ptr<arttest::Hit>, art::Ptr<arttest::Track>>"/>
  <class name="std::vector<arttest::Hit>"/>
  <class name="std::vector<art::Ptr<double>>"/>
  <class name="std::vector<arttest::SimpleDerived>"/>
  <class name="std::vector<art::Ptr<arttest::SimpleDerived>>"/>
  <class name="std::vector<art::Ptr<arttest::Simple>>"/>
  <class name="std::vector<arttest::Track>"/>
  <class name="std::vector<std::pair<art::Ptr<arttest::Hit>, art::Ptr<arttest::Track>>>"/>
  <class name="std::vector<arttest::AssnTestData>"/>
  <class name="std::vector<std::string>"/>
  <class name="std::vector<art::Ptr<cet::map_vector<std::string>::value_type>>"/>
  <class name="std::vector<art::Ptr<std::string>>"/>
  <class name="std::vector<art::Ptr<cet::map_vector<unsigned int>::value_type>>"/>
  <class name="std::vector<std::pair<art::Ptr<unsigned long>, art::Ptr<std::string>>>"/>

  <class name="art::Wrapper<arttest::IntProduct>"/>
  <class name="art::Wrapper<arttest::CompressedIntProduct>" compression="9"/>
  <class name="art::Wrapper<arttest::Int16_tProduct>"/>
  <class name="art::Wrapper<arttest::DoubleProduct>"/>
  <class name="art::Wrapper<arttest::MockClusterList>"/>
  <class name="art::Wrapper<std::vector<arttest::SimpleDerived>>"/>
  <class name="art::Wrapper<art::PtrVector<arttest::SimpleDerived>>"/>
  <class name="art::Wrapper<art::PtrVector<arttest::Simple>>"/>
  <class name="art::Wrapper<arttest::PtrToNonPersistable>"/>
  <class name="art::Wrapper<art::Ptr<double>>"/>
  <class name="art::Wrapper<arttest::ProductWithPtrs>"/>
  <class name="art::Wrapper<std::vector<art::Ptr<double>>>"/>
  <class name="art::Wrapper<art::PtrVector<double>>"/>
  <class name="art::Wrapper<arttest::VSimpleProduct>"/>
  <class name="art::Wrapper<std::vector<arttest::Hit>>"/>
  <class name="art::Wrapper<std::vector<arttest::Track>>"/>
  <class name="art::Wrapper<art::Assns<arttest::Hit, arttest::Track, void>>"/>
  <class name="art::Wrapper<art::Assns<arttest::Track, arttest::Hit, void>>"/>
  <class name="art::Wrapper<art::Assns<std::string, size_t, arttest::AssnTestData>>"/>
  <class name="art::Wrapper<art::Assns<std::string, size_t, std::string>>"/>
  <class name="art::Wrapper<art::Assns<size_t, std::string, arttest::AssnTestData>>"/>
  <class name="art::Wrapper<art::Assns<size_t, std::string, std::string>>"/>
  <class name="art::Wrapper<art::Ptr<int>>"/>
  <class name="art::Wrapper<art::Ptr<std::string>>"/>
  <class name="art::Wrapper<art::PtrVector<cet::map_vector<std::string>::value_type>>"/>
  <class name="art::Wrapper<art::PtrVector<std::string>>"/>
  <class name="art::Wrapper<cet::map_vector<std::string>>"/>
  <class name="art::Wrapper<cet::map_vector<unsigned int>>"/>
  <class name="art::Wrapper<std::vector<art::Ptr<cet::map_vector<unsigned int>::value_type>>>"/>
  <class name="art::Wrapper<std::vector<size_t>>"/>
  <class name="art::Wrapper<art::Assns<size_t, std::string, void>>"/>
  <class name="art::Wrapper<art::Assns<std::string, size_t, void>>"/>
  <class name="art::Wrapper<arttest::StringProduct>"/>

  <class name="std::vector<arttest::StringProduct>"/>
  <class name="art::Wrapper<std::vector<arttest::StringProduct> >"/>

  <class name="cet::map_vector<arttest::StringProduct>::value_type"/>
  <class name="cet::map_vector<arttest::StringProduct>::impl_type"/>
  <class name="cet::map_vector<arttest::StringProduct>"/>
  <class name="art::Wrapper<cet::map_vector<arttest::StringProduct> >"/>

  <class name="critictest::LitePtrTestProduct" ClassVersion="11">
   <version ClassVersion="11" checksum="597321487"/>
    <version ClassVersion="10" checksum="2678853457"/>
  </class>
  <class name="art::Wrapper<critictest::LitePtrTestProduct>"/>

  <class name="critictest::LiteAssnTestData" ClassVersion="10">
    <version ClassVersion="10" checksum="4253230781"/>
  </class>
  <class name="std::vector<critictest::LiteAssnTestData>"/>

  <class name="art::Assns<int, arttest::StringProduct, critictest::LiteAssnTestData>"/>
  <class name="art::Wrapper<art::Assns<int, arttest::StringProduct, critictest::LiteAssnTestData> >"/>

  <class name="art::Assns<arttest::StringProduct, int, critictest::LiteAssnTestData>"/>
  <class name="art::Wrapper<art::Assns<arttest::StringProduct, int, critictest::LiteAssnTestData> >"/>

  <class name="art::Assns<int, arttest::StringProduct, void>"/>
  <class name="art::Wrapper<art::Assns<int, arttest::StringProduct, void> >"/>

  <class name="art::Assns<arttest::StringProduct, int, void>"/>
  <class name="art::Wrapper<art::Assns<arttest::StringProduct, int, void> >"/>


</lcgdict>
