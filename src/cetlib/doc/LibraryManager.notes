## Multi-threading analysis of `cet::LibraryManager`{.cpp}

### Base classes

None

### Public members

* `static struct nothrow_t {} nothrow`{.cpp}

	Empty `struct`{.cpp} type used as a tag for choosing no-throw overloads.  No immediate concerns, but could arguably improve the design by just using the `nothrow_t` type as a template argument, and not worry about providing an instance as a function argument.

### Private members

* `std::string const lib_type_`{.cpp}

	`const`{.cpp} member used to specify plugin type (e.g. "module").  No issues.

* `std::string const pattern_stem_`{.cpp}

	`const`{.cpp} member used to specify file regex pattern.  No issues.

The following data members are never directly exposed to the user:

* `std::map<std::string, std::string> lib_loc_map_`{.cpp}

* `std::map<std::string, std::set<std::string> spec_trans_map_`{.cpp}

* `std::map<std::string, std::string> good_spec_trans_map_`{.cpp}

* `mutable std::map<std::string, void*> lib_ptr_map_`{.cpp}

	This is the problematic data member (see notes on `LibraryManger::get_lib_ptr` below).

### Public member functions

The `getSymbolByLibspec`, `getSymbolByPath`, `getLoadableLibraries`, `getLoadedLibraries`, and `getValidLibspecs` receive at least one argument by non-`const` reference--threading considerations are thus placed on the user.  Otherwise, no direct threading concerns (see information below, however, on the private member functions that are called by `getSymbol*`).

The `loadAllLibraries` function calls `get_lit_ptr`, whose implementation is not thread safe.

No issues with the remaining public member functions.

### Private member functions

The `lib_loc_map_inserter`, `spec_trans_map_inserter`, and `good_spec_trans_map_inserter` functions are non-`const` member functions called only during object construction.  Those do not appear to create multithreading issues.

The following functions are more problematic:

* `void* get_lib_ptr(std::string const& lib_loc) const`{.cpp}

	This function, though marked `const`{.cpp}, modifies the `lib_ptr_map_` private data member.  The behavior of calling this function is:
	
	* If the library has already been loaded, return its cached
      `void*`{.cpp} pointer.  
	* Otherwise, attempt to load the library
      via `dlopen`{.cpp}, cache its pointer in the `lib_ptr_map_`, and
      return same pointer.
	
	Regarding `dlerror()` from the POSIX programmer's manual (http://www.unix.com/man-page/posix/3p/dlerror/) :
	
	* A call to `dlerror()` returns the last error that occurred during dynamic linking processing.

	* _It is implementation-defined whether or not the dlerror() function is thread-safe. A thread-safe implementation shall return only errors that occur on the current thread._ For Linux and OSX, the `dlerror()` function is thread safe.  However, see next point.

	* _Depending on the application environment with respect to asynchronous execution events, such as signals or other asynchronous computation sharing the address space, conforming applications should use a critical section to retrieve the error pointer and buffer._

	The `dlopen()` call is not thread safe.

* `void* getSymbolByPath_(std::string const& lib_loc, std::string const& sym_name, bool should_throw_on_dlsym) const`{.cpp}

	This function calls `get_lib_ptr`, and it also has calls to `dlerror()` and `dlsym()`, the latter of which is not thread safe.

* `void* getSymbolByLibspec(std::string const& lib_loc, std::string const& sym_name, bool should_throw_on_dlsym) const`{.cpp}

	No threading issues other than those introduced by its call to `LibraryManager::getSymbolByPath_`.

### General observations:

* The function(s) that call `dlerror()`, `dlopen()`, and `dlsym()` will need to have some locking mechanisms in place.

* The threading issues can be localized by loading all relevant libraries during construction.  This is likely to be unfeasible in many cases.

### Non-thread related observations:

* The constructor of `cet::LibraryManager` receives two `std::string` arguments by value, which are then moved to the member data.  These should arguably be changed to `std::string const&`{.cpp} since the copy-then-move (current pattern) is more inefficient than just the copy, which you would get from passing the argument to the constructor by `const`{.cpp} reference.  This would be an interface change, potentially breaking user code.

* Can `boost::regex` be replaced with `std::regex`?

* Is our usage of `dlerror()` correct?  It looks correct when used in a `dlsym()`-calling context, but I'm not sure about when we use `dlopen()`. 

* Should consider changing the return type of `getValidLibspecs`, `getLoadedLibraries`, and `getLoadableLibraries` from `std::size_t`{.cpp} to `std::vector<std::string>` and get rid of passing a vector in by reference.

THREADING

Adding a lock around the `dl*` C-function calls can lead to deadlock
if a `static`{.cpp} member is being initialized in the library to be
loaded.  Since such a guarantee cannot be made, the guidance will be
that `LibraryManager` should be used only in a single-threaded
context.

Note: A recursive mutex will solve nearly all the above issues, and will 
permit multiple threads to use the library manager at the same time, which
may be beneficial in the future.  The one case that is not handled is when
code run at static initialization time starts threads that use the 
library manager.  We do not want to support this sort of code anyway.
