## Multi-threading analysis of `cet::PluginFactory`{.cpp}

### Base classes

None

### Public members

* `static LibraryManager::nothrow_t nothrow`{.cpp}

	Empty `struct`{.cpp} type used as a tag for choosing no-throw `PluginFactory::find` overloads.  No immediate concerns, but could arguably improve the design by just using the `nothrow_t` type as a template argument, and not worry about providing an instance as a function argument.

### Private members

* `cet::LibraryManager lm_`{.cpp}

	Used in the `PluginFactory::find` overloads for getting the symbols in the libraries.  
	Only `const`{.cpp}-referenced `cet::LibraryManager` member functions used.  
	Could be `const` data member if assignment not desired.

* `std::string releaseVersionString_`{.cpp}
* `std::function<std::string()> releaseVersionFunc_`{.cpp}

	Both variables above set by the `setDiagReleaseVersion()` functions below.

### Public member functions

* `void setDiagReleaseVersion(...)`{.cpp}

	These non-`const`{.cpp} functions modify the `releaseVersionString_` and `releaseVersionFunc_` data members, introducing data-races.  However, neither functions are called within the _art_ suite.  
	Could arguably removed, and release-version setting could happen at construction time.

* `RESULT_TYPE call(std::string const& libspec, std::string const& funcname, ARGS&&... args) const`{.cpp}
* `auto find(std::string const& funcname, libspec[,nothrow_t]) const -> RESULT_TYPE(*)(ARGS...)`{.cpp}

	No issues.

### Private member functions
	
* `std::string releaseVersion_() const`{.cpp}

	No issues.

### General observations:

Except for the `static`{.cpp} `nothrow` member, and the seemingly
unused `releaseVersionString_` and `releaseVersionFunc_` data members,
this class seems to have very few issues.
