## Multi-threading analysis of `cet::include`{.cpp}

Although there are no obvious threading issues within the `include`
implementations, the passed in arguments are non-`const`{.cpp}
references.  The semantics of `cet::include`, which involves recursive
including if necessary, imply that `cet::include` should not be _used_
in a multi-threaded context.  In other words, it is the responsibility
of the caller of `cet::include` to handle potential data races.

### Non-threading observations:

* Instead of both `include` overloads repeating the same code in their
  definitions, each overload should reference a common implementation,
  providing their own customizations as necessary.

