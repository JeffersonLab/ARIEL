## Multi-threading analysis of `cet::canonical_string`{.cpp}

No inherent threading issues.\

It is incumbent on the user to handle any potential data races.

### Non-threading observation

The `result` variable, passed in as a non-`const` reference should arguably be cleared before filling it.  We should provide a strong exception guarantee by following the pattern:

~~~~{.cpp}
bool canonical_string(std::string const& s, std::string& result)
try
{
  bool success {false};
  result = canonical_string(s);
  return true;
}
catch(...) 
{
  return false;
}
~~~~
