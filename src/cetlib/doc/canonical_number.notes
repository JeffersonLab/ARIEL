## Multi-threading analysis of `cet::canonical_number`{.cpp}

No inherent threading issues.\
Some `static const` local variables that are of no consequence.\

It is incumbent on the user to handle any potential data races.

### Non-threading observation

The `result` variable, passed in as a non-`const` reference should arguably be cleared before filling it.  We should provide a strong exception guarantee by following the pattern (e.g.):

~~~~{.cpp}
bool canonical_number(std::string const& value, std::string& result)
{
  std::string tmp;
  // fill tmp with the canonical value
  result = std::move(tmp);
  return true;
}
~~~~
