#!/usr/bin/perl -w
########################################################################
# cetskelgen
#
# Modular skeleton generator for plugins.
#
# This supersedes the artmod utility, available in some versions of
# cetpkgsupport.
#
########################################################################
# Important note for maintainers.
#
# The AUTOLOAD definition below is intended to allow easy access to all
# plugin functions where not finding the function for a particular
# plugin is not an error. If you wish to call $plugin->foo($a, $b) with
# no default return in case of the function not being found, you should
# instead call:
#
#   plugin_foo($plugin, $a, $b, undef);
#
# If you wish to have plugin_foo return a default value (say, "oops") if
# the foo() function cannot be found:
#
#   plugin_foo($plugin, $a, $b, "oops");
#
# This mechanism is unable to handle array or hash default returns, but
# array ref and hash values are fine. In these cases, one could always
# do:
#
#   plugin_foo($plugin, $a, $b, undef) || ();
#
# The undef for no default may be omitted if foo() takes no arguments.
#
#
# 2015/04/17 CHG <greenc@fnal.gov>.
########################################################################
# Package definition (for use by Modules::Pluggable).
package CetSkel;

########################################################################
# Preamble.
use strict;

use Cwd qw(chdir :DEFAULT);
use File::Basename;
use FileHandle;
use Getopt::Long;
use Pod::Usage;
use Text::ParseWords;

Getopt::Long::Configure(qw(no_ignore_case bundling require_order));

use Module::Pluggable
  search_path => 'CetSkelPlugins',
  instantiate => 'new';

use vars qw($AUTOLOAD);

# Allow faster development cycle for changes to cetskelgen.
use vars qw($CetSkelProduct $CetSkelVersion);
eval " use CetSkel::cetskelgen::VersionInfo; ";
if ($@) {
  ($CetSkelProduct, $CetSkelVersion) = qw(TEST TEST);
}

# Prototypes.
sub find_plugin_types(\%);
sub process_generation_options($$\%);
sub ins_vals($$\$);
sub decl_boilerplate($$\$);
sub impl_boilerplate($$\$);
sub class_defn($$\@\@);
sub class_impl($$\@\@);
sub generate_multi($\%);

####################################
# Variables and defaults.
my $currtime = localtime;

my $default_boilerplate = << 'EOF';
////////////////////////////////////////////////////////////////////////
// Class:       %c
// Plugin Type: %t (%P %V)
// File:        %f
//
// Generated at %d by %U using cetskelgen
// from %p version %v.
////////////////////////////////////////////////////////////////////////
EOF

my $indent = ' ' x 2;
my $options = {};

my @plugins = plugins();
my %plugin_types;
find_plugin_types(%plugin_types) or exit(1);

########################################################################
# Main code.

# Check options and non-option arguments.
my ($plugin_type, $plugin_options, $qual_name) = process_arguments();

# Process plugin type
check_plugin_type($plugin_type);

$plugin_type = lc $plugin_type;
my $plugin_generator = $plugin_types{$plugin_type};

# Process name;
my @namespaces = split '::', $qual_name;
my $class_name = pop @namespaces;

# Allow plugin to process options.
plugin_processOptions($plugin_generator, $options, $plugin_options, undef);

# Process header location for multi
my $header_inc_loc = (exists ${options}->{"header-loc"})?
  "$options->{\"header-loc\"}/":
  "";
$header_inc_loc = "${header_inc_loc}${class_name}.h";

my $output_dir = (exists $options->{"output-dir"})?$options->{"output-dir"}:getcwd();

my $split_header_path =
  sprintf("%s/${class_name}.h",
          $output_dir);

my $split_impl_path =
  sprintf("%s/${class_name}%s",
          $output_dir,
          $options->{"split-ext"} || '.cxx');

my $plugin_source_path =
  sprintf("%s/${class_name}%s.cc",
          $output_dir,
          plugin_pluginSuffix($plugin_generator, ""));

maybe_backup(${options}->{force} || 0,
             $split_header_path,
             $split_impl_path,
             $plugin_source_path);

my %generate_template = (header => $split_header_path,
                         split_impl => $split_impl_path,
                         plugin_source => $plugin_source_path);

my %generate = process_generation_options($plugin_generator,
                                          $options,
                                          %generate_template);

# Generate code.
if (scalar keys %generate == 1 and $generate{plugin_source}) {
  # Everything together in the source file.
  generate_combined($plugin_generator, $generate{plugin_source});
} else {
  # Something else.
  generate_multi($plugin_generator, %generate);
}

1;

########################################################################
# Subroutines

# AUTOLOAD for any function starting with plugin_.
sub AUTOLOAD {
  my ($func) = ($AUTOLOAD =~ m&^CetSkel::plugin_(.*)$&);
  my $plugin = shift;
  my $default = pop;
  if ($plugin->can($func)) {
    return $plugin->$func(@_);
  } else {
    return ($default || undef);
  }
}

# Print only if verbose is selected.
sub vprint {
  print "INFO: ", @_ if ${options}->{verbose};
}

# Process command-line options and non-option arguments.
sub process_arguments {
  GetOptions($options,
             "all-entries|A",
             "boilerplate|b=s",
             "entry-list|E=s",
             "entries|entry|e=s@",
             "force|f",
             "header-loc=s",
             "guard=s",
             "help|h|?",
             "help-type=s",
             "help-types",
             "impl-boilerplate=s",
             "output-dir|dir|d=s",
             "split!",
             "split-ext=s",
             "use-boost-unit|boost-unit|u",
             "verbose|v",
             "version|V"
            ) or pod2usage(-exitval => 2);

  # One option implies the other.
  ${options}->{split} = 1
    if (exists ${options}->{"split-ext"});

  pod2usage(-exitval => 1, -verbose => 3) if $options->{help};

  if ($options->{"help-type"}) {
    help_type($options->{"help-type"}, 1);
    exit(2);
  }

  help_types() if ($options->{"help-types"});

  if ($options->{version}) {
    print STDERR "cetskelgen from $CetSkelProduct version $CetSkelVersion.\n";
    exit(2);
  }

  if ((scalar @ARGV) == 1) {
    my @ptypes_found = map { ($ARGV[0] =~ /\Q$_\E$/i)?$_:(); } keys %plugin_types;
    if (scalar @ptypes_found == 1) {
      printf STDERR "INFO: Inferring plugin type $ptypes_found[0] from class name $ARGV[0].\n";
      return ($ptypes_found[0], [], $ARGV[0]);
    } else {
      printf STDERR "ERROR: Unable to infer plugin type from single argument, class name $ARGV[0], \n";
      pod2usage(-exitval => 2);
    }
  } elsif ((scalar @ARGV) == 2) {
    return (split_plugin_options($ARGV[0]), $ARGV[1]);
  } else {
    print STDERR "ERROR: Expected exactly two non-option arguments.\n";
    pod2usage(-exitval => 2);
  }
}

# Check provided plugin type is recognized.
sub check_plugin_type {
  my $plugin_type = shift;
  if (not exists $plugin_types{lc $plugin_type}) {
    print STDERR "ERROR: $plugin_type is not a recognized plugin type (",
      join(", ", sort keys %plugin_types), ")\n";
    exit(1);
  }
}

# Print help text for available plugin types.
sub help_types {
  print STDERR "Available plugin types:\n";
  foreach my $plugin_type (sort keys %plugin_types) {
    help_type($plugin_type);
  }
  print STDERR
    "For information on required and optional functions for each type,\n",
      "use --help-type <type>\n";
  exit(2);
}

# Print help text for one particular plugin type.
sub help_type {
  my ($plugin_type, $verbose) = @_;
  $plugin_type = lc $plugin_type;
  check_plugin_type($plugin_type);
  my $plugin = $plugin_types{$plugin_type};
  print STDERR "* $plugin_type from ",
    plugin_product($plugin, "Unknown"), " version ",
      plugin_version($plugin, "Unknown"), " (",
        plugin_source($plugin, "Unknown"), ")\n";
  print STDERR grep( { s&(^|\n)(?!$)&${1}${indent}&g if $_; }
                    plugin_usage($plugin) || ());
  if ($verbose) {
    my $required_entries = plugin_requiredEntries($plugin, {});
    my $optional_entries = plugin_optionalEntries($plugin, {});
    print STDERR "Required members:",
      scalar keys %$required_entries ?
        ("\n", map({sprintf("  %s\n", $required_entries->{$_});}
                   sort keys %{$required_entries})) : "<none>\n";
    print STDERR "Optional members:",
      scalar keys %$optional_entries ?
      ("\n", map({sprintf("  %s\n", $optional_entries->{$_});}
                 sort keys %{$optional_entries})) : "<none>\n";;
  }
}

# Survey the available plugins and check for inconsistencies.
sub find_plugin_types(\%) {
  my $plugin_types = shift;
  my $result = 1;
  foreach my $plugin (@plugins) {
    my $type = plugin_type($plugin, "");
    if ($type) {
      if (exists $plugin_types->{$type}) {
        printf STDERR "LOGIC ERROR: plugins %s and %s claim to provide the same plugin type $type.\n",
          $plugin,
            $plugin_types->{$type};
        $result = 0;
      } else {
        $plugin_types->{$type} = $plugin;
      }
    } else {
      print STDERR "WARNING: Found a plugin $plugin which does not define a type() method and therefore cannot be used.\n";
    }
  }
  return $result;
}

# Return the plugin type and any plugin-specific options.
sub split_plugin_options {
  my ($plugin_type, $plugin_options) = split /:/, shift, 2;
  return ($plugin_type, [ parse_line(',', 0, $plugin_options) ]);
}

# Check for existing files and backup or abort.
sub maybe_backup {
  my ($force, @files) = @_;
  # Check for required force.
  my @existing_files = ();
  my @redundant_backups = ();
  foreach my $file (@files) {
    if (-e $file) {
      push @existing_files, $file;
    } elsif ($force and -e "${file}~") {
      push @redundant_backups, "${file}~";
    }
  }
  if (scalar @existing_files > 0) {
    if ($force) {
      print STDERR "INFO: the following output files exist already and will be backed-up:\n      ",
        join("\n      ", @existing_files),
          "\n";
      my @failed = grep { system("mv -f \"$_\" \"${_}~\"") } @existing_files;
      if (scalar @failed) {
        print STDERR "ERROR: the following output files could not be moved to backup, please investigate:\n       ",
          join("\n       ", @failed),
            "\n";
        exit(2);
      } else {
        foreach my $file (@redundant_backups) {
          system("rm -f \"$file\"");
        }
        if (scalar @redundant_backups) {
          print STDERR "INFO: removed redundant backup files:\n      ",
            join("\n      ", @redundant_backups),
              "\n";
        }
      }
    } else {
      print STDERR "ERROR: the following output files exist already, use --force to overwrite:\n       ",
        join("\n       ", @existing_files),
          "\n";
      exit(2);
    }
  }
}

sub process_generation_options($$\%) {
  my ($plugin, $options, $generate_template) = @_;
  my %generate = ();
  if (not $options->{generate}) {
    if (${options}->{split}) {
      %generate = %$generate_template;
    } else {
      %generate = (plugin_source => $generate_template->{plugin_source});
    }
  } else {
    # Plugin has specified: check it.
    my $found_good_keys = 0;
    my %found_bad_keys = ();
    foreach my $key (sort keys %{$options->{generate}}) {
      if (exists $generate_template->{$key}) {
        $generate{$key} = $generate_template{$key};
        ++$found_good_keys;
      } else {
        $found_bad_keys{$key} = $options->{generate}->{$key};
      }
    }
    if (scalar keys %found_bad_keys) {
      print STDERR "LOGIC ERROR: specified plugin $plugin\n",
        "             of type $plugin_type wishes to generate the following unkown\n",
          " entities: ",
            map( { "$_ => $found_bad_keys{$_}"; } sort keys %found_bad_keys), ".\n";
      exit(1);
    } elsif (!$found_good_keys) {
      print STDERR "LOGIC ERROR: specified plugin $plugin\n",
        "             of type $plugin->type() specified an empty set of files\n",
          "             to generate!\n";
      exit(1);
    }
  }
  return %generate;
}

# Do the substitution of "%" directives in the boilerplate source.
sub ins_vals($$\$) {
  my ($plugin, $current_filename, $bp) = @_;
  return unless $$bp;
  my $remainder = $$bp;
  $$bp = "";
 WL: while ($remainder =~ s&(.*?)(\\%|%.)&&ms) {
    $$bp = "$$bp${1}"; # Preamble.
    my $found_exp = ${2};
    my $wanted_data;
    my $lc = substr $found_exp, -1, 1;
  SW1: {
      $lc eq "%" and do {
        $wanted_data = "%"; last SW1; };
      $lc eq "c" and do {
        $wanted_data = $class_name; last SW1; };
      $lc eq "C" and do {
        $wanted_data = $qual_name; last SW1; };
      $lc eq "d" and do {
        $wanted_data = $currtime; last SW1; };
      $lc eq "f" and do {
        $wanted_data = basename($current_filename); last SW1; };
      $lc eq "F" and do {
        $wanted_data = $current_filename; last SW1; };
      $lc eq "n" and do {
        $wanted_data = (scalar @namespaces) ? join("::", @namespaces) : "::"; last SW1; };
      $lc eq "p" and do {
        $wanted_data = "$CetSkelProduct"; last SW1; };
      $lc eq "P" and do {
        $wanted_data = plugin_product($plugin, "Unknown"); last SW1; };
      $lc eq "t" and do {
        $wanted_data = $plugin_type; last SW1; };
      $lc eq "u" and do {
        $wanted_data = (getpwuid($<))[0]; last SW1; };
      $lc eq "U" and do { $wanted_data = (getpwuid($<))[6] ||
                            (getpwuid($<))[0]; last SW1; };
      $lc eq "v" and do {
        $wanted_data = "$CetSkelVersion"; last SW1; };
      $lc eq "V" and do {
        $wanted_data = plugin_version($plugin, "Unknown"); last SW1; };
      print STDERR "Unrecognized substitution expression, ",
        "\"%$lc\" in boilerplate: ignored.\n";
      $$bp="$$bp${found_exp}";
      next WL;
    }
    $$bp = "$$bp${wanted_data}";
  }
  $$bp = "$$bp${remainder}";
  # Deal with any embedded \\[UE] sets
  $$bp =~ s&\\[U](.*?)(?:\\E|$)&\U$1\E&gm;
  $$bp =~ s&\\[L](.*?)(?:\\E|$)&\L$1\E&gm;
  $$bp =~ s&\\[E]&&gm; # Deal with dangling \Es.
}

sub decl_boilerplate($$\$) {
  my ($plugin, $current_filename, $h_b) = @_;
  if (${options}->{boilerplate}) {
    my $f = ${options}->{boilerplate};
    $$h_b = `cat \"$f\"`;
  } elsif ($ENV{CETSKEL_BOILERPLATE}) {
    $$h_b = `cat \"$ENV{CETSKEL_BOILERPLATE}\"`;
  } else {
    $$h_b = $default_boilerplate;
  }
  ins_vals($plugin, $current_filename, $$h_b);
}

sub impl_boilerplate($$\$) {
  my ($plugin, $current_filename, $i_b) = @_;
  if (${options}->{"impl-boilerplate"}) {
    my $f = ${options}->{"impl-boilerplate"};
    $$i_b = `cat \"$f\"`;
  } elsif ($ENV{CETSKEL_IMPL_BOILERPLATE}) {
    $$i_b = `cat \"$ENV{CETSKEL_IMPL_BOILERPLATE}\"`;
  } elsif ($options->{split}) {
    $$i_b = $default_boilerplate;
  }
  ins_vals($plugin, $current_filename, $$i_b);
}

sub generate_multi($\%) {
  my ($plugin, $generate) = @_;
  my ($h_b, $i_b);

  ####################################
  # Header
  my $current_filename = $generate->{header};

  my $fh = new FileHandle(">${current_filename}");
  unless (defined $fh) {
    print STDERR "ERROR: unable to open \"${current_filename}\" for output.\n";
    exit(1);
  }

  my $header_guard = ${options}->{guard} ||
    $ENV{CETSKEL_HEADER_GUARD} ||
      $header_inc_loc;

  ins_vals($plugin, $current_filename, $header_guard);

  $header_guard =~ s&(?:[/\.]|::)&_&g;

  print $fh "#ifndef $header_guard\n";
  print $fh "#define $header_guard\n";

  # Boilerplate.
  decl_boilerplate($plugin, $current_filename, $h_b);
  print $fh $h_b, "\n";

  # Header includes.
  header_includes($plugin, $fh, "class_defn");

  # Forward declarations
  if ($plugin->can('fwdDeclarations')) {
    print $fh $plugin->fwdDeclarations(${indent}), "\n";
  }

  # Class declaration.
  class_decl($fh);

  print $fh "\n\n";

  my @optional_entries = ();
  my @unrecognized_entries = ();

  # Class definition.
  class_defn($plugin, $fh, @optional_entries, @unrecognized_entries);

  print $fh "\n";

  # Plugin declaration (if applicable).
  print $fh plugin_declareMacro($plugin, $qual_name, undef) || ();

  print $fh "#endif /* $header_guard */\n";

  close($fh);
  print "INFO: Wrote ${current_filename}\n";

  ####################################
  # Implementation
  my $headers_wanted;
  if ($generate->{split_impl}) {
    $headers_wanted = "class_impl";
    $current_filename = $generate->{split_impl}
  } elsif ($generate->{plugin_source}) {
    $headers_wanted = "impl_define_combo";
    $current_filename = $generate->{plugin_source};
  } else {
    # We're an interface;
    return;
  }

  $fh = new FileHandle(">${current_filename}");
  unless (defined $fh) {
    print STDERR "ERROR: unable to open \"${current_filename}\" for output.\n";
    exit(1);
  }

  # Implementation boilerplate.
  impl_boilerplate($plugin, $current_filename, $i_b);
  print $fh $i_b, "\n" if $i_b;

  # Implementation includes.
  header_includes($plugin, $fh, $headers_wanted);

  print $fh "\n";

  # Class implementation.
  class_impl($plugin, $fh, @optional_entries, @unrecognized_entries);

  # Plugin registration.
  if ($generate->{split_impl} and $generate->{plugin_source}) {
    # Switch to separate file.
    close($fh);
    print "INFO: Wrote ${current_filename}\n";
    $current_filename = $generate->{plugin_source};
    $fh = new FileHandle(">${current_filename}");
    unless (defined $fh) {
      print STDERR "ERROR: unable to open \"${current_filename}\" for output.\n";
      exit(1);
    }
    my $reg_bp = $default_boilerplate;
    ins_vals($plugin, $current_filename, $reg_bp);
    print $fh $reg_bp, "\n";
    header_includes($plugin, $fh, "plugin_define");
  }

  print $fh plugin_defineMacro($plugin, $qual_name, undef) || ();

  close($fh);
  print "INFO: Wrote ${current_filename}\n";
}

sub generate_combined {
  my ($plugin, $current_filename) = @_;
  my ($h_b, $i_b);
  my $fh = new FileHandle(">${current_filename}");
  unless (defined $fh) {
    print STDERR "ERROR: unable to open \"${current_filename}\" for output.\n";
    exit(1);
  }

  # Boilerplate.
  decl_boilerplate($plugin, $current_filename, $h_b);
  print $fh $h_b, "\n";

  # Header includes.
  header_includes($plugin, $fh, "combined");

  # Class declaration.
  class_decl($fh);

  print $fh "\n\n";

  my @optional_entries = ();
  my @unrecognized_entries = ();

  # Class definition.
  class_defn($plugin, $fh, @optional_entries, @unrecognized_entries);

  print $fh "\n\n";

  # Implementation boilerplate.
  impl_boilerplate($plugin, $current_filename, $i_b);
  print $fh $i_b, "\n" if $i_b;

  # Class implementation.
  class_impl($plugin, $fh, @optional_entries, @unrecognized_entries);

  # Plugin registration.
  print $fh plugin_declareMacro($plugin, $qual_name, undef) || ();
  print $fh plugin_defineMacro($plugin, $qual_name, undef) || ();

  # Close file.
  $fh->close();

  print "INFO: Wrote ${current_filename}\n";
}

sub header_includes {
  my $modes =
    { combined => 0x7,
      class_defn => 0x1,
      class_impl => 0x2,
      plugin_define => 0x4,
      impl_define_combo => 0x6
    };
  my ($plugin, $fh, $mode) = @_;
  if (not exists $modes->{$mode}) {
    print STDERR "LOGIC ERROR: unknown header_includes mode $mode.\n";
    exit(9);
  }
  my %headers = ();
  if ($modes->{$mode} & $modes->{class_defn}) {
    if ($plugin->can('baseClasses')) {
      map { $headers{sprintf('"%s"', $_->{header})} = 1; } @{$plugin->baseClasses()};
    }
    if ($plugin->can('declHeaders')) {
      map { $headers{$_} = 1; } @{$plugin->declHeaders()};
    }
  }
  if ($modes->{$mode} & $modes->{class_impl}) {
    if ($plugin->can('implHeaders')) {
      map { $headers{$_} = 1; } @{$plugin->implHeaders()};
    }
  }
  if (($modes->{$mode} & $modes->{plugin_define}) and
      $plugin->can('macrosInclude')) {
    $headers{sprintf('"%s"', $plugin->macrosInclude())} = 1;
  }

  # Print all expected headers, grouped into local / system.
  my @local_headers = sort(grep /^"/, sort keys %headers);
  push @local_headers, "" if scalar @local_headers;
  my @system_headers = sort(grep /^</, sort keys %headers);
  push @system_headers, "" if scalar @system_headers;

  print $fh
    join("\n",
         map { $_?"#include $_":$_; }
         ((($modes->{$mode} & $modes->{class_defn}) ?
           () :
           "\"${header_inc_loc}\""),
          (($options->{"use-boost-unit"} and
            $modes->{$mode} & $modes->{class_impl}) ?
           ("\"cetlib/quiet_unit_test.hpp\"", "\n")
           : ()),
          @local_headers,
          @system_headers)
        ), "\n" if scalar keys %headers;
}

sub class_decl {
  my $fh = shift;
  my $indent_level = 0;
  foreach my $ns (@namespaces) {
    print $fh $indent x $indent_level++, "namespace ${ns} {\n";
  }
  print $fh $indent x $indent_level, "class $class_name;\n";
  foreach my $ns (@namespaces) {
    print $fh $indent x --$indent_level, "}\n";
  }
}

sub class_defn($$\@\@) {
  my ($plugin, $fh, $optional_ep_list, $unrecognized_entries) = @_;
  my $protections = { public => 0, protected => 1, private => 2 };
  my $base_classes = plugin_baseClasses($plugin, []);
  my $errors = join("\n", map({ ($_->{protection} and not exists $protections->{$_->{protection}}) ?
                                sprintf("LOGIC ERROR: base class %s has illegal protection %s in $plugin",
                                        $_->{class}, $_->{protection}) : (); } @$base_classes));
  if ($errors) {
    print STDERR $errors;
    exit(1);
  }
  print $fh "class ${qual_name}",
    (scalar @$base_classes) ? " : " : "",
    join(", ", map({ sprintf("%s %s",
                             ($_->{protection} || "public"),
                             $_->{class}); } @$base_classes)),
                               " {\npublic:\n";
  my $constructors = plugin_constructors($plugin, []);
  print $fh map({ sprintf("${indent}%s${class_name}(%s);\n",
                          ($_->{explicit}) ? "explicit " : "",
                          join(", ", @{$_->{args}})); }
                @$constructors);
  if (plugin_virtualDestructor($plugin, 0)) {
    print $fh <<EOF;
${indent}virtual ~${class_name}() noexcept = default;

EOF
  } else {
    print $fh <<EOF;
${indent}// The compiler-generated destructor is fine for non-base
${indent}// classes without bare pointers or other resource use.

EOF
  }
  if (not plugin_canMoveOrCopy($plugin, 0)) {
    print $fh <<EOF;
${indent}// Plugins should not be copied or assigned.
${indent}${class_name}(${class_name} const &) = delete;
${indent}${class_name}(${class_name} &&) = delete;
${indent}${class_name} & operator = (${class_name} const &) = delete;
${indent}${class_name} & operator = (${class_name} &&) = delete;

EOF
  }
  my $req_count = 0;
  my $required_entries = plugin_requiredEntries($plugin, {});
  foreach my $req (sort keys %{$required_entries}) {
    unless ($req_count++) {
      print $fh <<EOF;
${indent}// Required functions.
EOF
    }
    vprint "Adding required member function ",
      $required_entries->{${req}},
        "\n";
    print $fh "${indent}",
      $required_entries->{${req}}, ";\n";
  }

  print $fh "\n" if $req_count;

  my %entries_hash = ();
  my @entries = ();
  my @file_entries = ();
  if (${options}->{"entry-list"}) {
    if (-r ${options}->{"entry-list"}) {
      my $f = ${options}->{"entry-list"};
      @file_entries = `cat \"$f\"`;
      chomp @file_entries;
    } else {
      print STDERR "ERROR: specified entry list file \"",
        ${options}->{"entry-list"}, "\" does not exist\n",
          "or is not readable.\n";
      exit(1);
    }
  }
  my $optional_entries = plugin_optionalEntries($plugin, {});
  foreach my $entry (@{${options}-> {"entries"}},
                     (${options}->{"all-entries"} ?
                      sort keys %{$optional_entries} :
                      () ),
                     @file_entries) {
    if (not exists $entries_hash{$entry}) {
      push @entries, $entry;
      $entries_hash{$entry} = 1;
    } else {
      print STDERR "WARNING: Ignoring duplicate entry $entry\n";
    }
  }
  my $opt_count = 0;
  foreach my $entry (@entries) {
    if (exists ${optional_entries}->{${entry}}) {
      push @{$optional_ep_list},
        ${optional_entries}->{${entry}};
      unless ($opt_count++) {
        print $fh <<EOF;
${indent}// Selected optional functions.
EOF
      }
      printf $fh "${indent}%s;\n",
        ${optional_entries}->{${entry}};
      vprint "Adding optional member function ",
        ${optional_entries}->{${entry}},
          "\n";
    } elsif ($entry =~ m&\<.*\(&) {
      print STDERR "WARNING: Listed private member function \"$entry\" is too complex to handle.\n",
        "Please add this to ${class_name} yourself after generation.\n";
      next;
    } else {
      vprint "INFO: Adding private member ",
        ($entry =~ m&\(\s*$&)?"function":"data",
        " $entry\n";
      push @{$unrecognized_entries}, "${entry}";
    }
  }
  print $fh ($opt_count ? "\n" : ""), "private:\n",
    map( { "${indent}${_};\n"; } grep m&\)\s*$&, @{$unrecognized_entries}),
      "\n",
        map( { "${indent}${_};\n"; } grep { not m&\)\s*$&; } @{$unrecognized_entries}),
          "${indent}// Declare member data here.\n",
          "\n};\n";
}

sub functions_first {
  my $a_func = $a =~ m&\)\s*$&;
  my $b_func = $b =~ m&\)\s*$&;
  if ($a_func and not $b_func) {
    return $a;
  } elsif ($b_func and not $a_func) {
    return $b;
  }
}

sub qualify_strip_func {
  my $func = shift;
  $func =~ s&^\s*\bvirtual\b\s*&&;
  $func =~ s&\s*\boverride\b\s*$&&;
  $func =~ s&([A-Za-z_0-9]+)(\s*(?:\(|$))&${qual_name}::${1}${2}&;
  return $func;
}

sub class_impl($$\@\@) {
  my ($plugin, $fh, $optional_ep_list, $unrecognized_entries) = @_;
  # Constructors and destructor.
  my $constructors = plugin_constructors($plugin, []);

  foreach my $constructor (@$constructors) {
    print $fh "${qual_name}::${class_name}(",
      join(", ", @{$constructor->{args}}),
        ")\n";
    if (exists $constructor->{initializers}) {
      print $fh "  :\n",
        join(",\n", map { "  $_" } @{$constructor->{initializers}}),
          "  // ,\n // More initializers here.\n{";
    } else {
      print $fh <<EOF;
// :
// Initialize member data here.
{
EOF
    }
    if (exists $constructor->{comment}) {
      my $comment;
      my $ctype = ref($constructor->{comment});
      if (not $ctype) {
        $comment = $constructor->{comment}
      } elsif ($ctype eq "ARRAY") {
        $comment = join("\n", chomp @{$constructor->{comment}});;
      } else {
        printf STDERR <<EOF, $plugin;
LOGIC ERROR: A member of %s's constructor() hash has an unexpected
             value of "comment" of type $ctype.
EOF
        exit(1);
      }
      print $fh map({ s&^\s*//\s?&// &; "${indent}// $_\n"; } split(/\n/, $comment));
    }
    print $fh <<EOF;
}

EOF
  }

  my $required_entries = plugin_requiredEntries($plugin, {});

  foreach my $req (sort keys %$required_entries) {
    my $f = $required_entries->{${req}};
    print $fh
      qualify_strip_func($f),
        "\n{\n${indent}// Implementation of required member function here.\n}\n\n";
  }

  foreach my $entry (@{$optional_ep_list}) {
    my $f = $entry;
    print $fh
      qualify_strip_func($f),
        "\n{\n${indent}// Implementation of optional member function here.\n}\n\n";
  }

  foreach my $entry (grep m&\)\s*$&, @{$unrecognized_entries}) {
    my $f = $entry;
    print $fh
      qualify_strip_func($f),
        "\n{\n${indent}// Implementation of private member function here.\n}\n\n";
  }

}

__END__

=pod

=head1 NAME

cetskelgen: Generate clean plugin source for art.

=head1 SYNOPSIS

B<cetskelgen> B<-h> | B<--help> | B<-?>

B<cetskelgen> B<--help-types>

B<cetskelgen> B<--help-type> I<plugin-type>

B<cetskelgen> [I<optons>] [--] [I<plugin-type>[:I<plugin-option>[,I<plugin-option>]+]] I<qualified-name>

I<Options>: B<--all-entries|-A> |
         B<--boilerplate|-b> I<file> |
         B<--entries|--entry|-e> I<entry>+ |
         B<--header-loc> I<path> |
         B<--output-dir|--dir|-d> I<dir> |
         B<--split> |
         B<--split-ext> [I<lib-source-extension>] |
         B<--verbose|-v>

Options marked with B<+> are repeatable and cumulative.

=head1 DESCRIPTION

I<cetskelgen> is a tool to produce an art plugin source skeleton for an
analyzer, a filter or a producer. The user can specify which optional
member functions are to be configured and whether to split the source
into three files or combine it into one. In addition, the name of a file
wherein boilerplate comments or code may be found for insertion into the
source may be specified.

=head2 HELP OPTIONS

=over

=item B<--help>

This help.

=item B<--help-types>

Display each available plugin type, with required and optional interface.

=back

=head2 ARGUMENTS

=over

=item I<plugin-type>

The type of the plugin to be generated. See the B<--help-types> option.

=item I<qualified-name>

The namespace-qualified class name (eg ns1::ns2::MyClass).

=back

=head2 OPTIONS

=over

=item B<--all-entries>

=item B<-A>

Include all optional entry points for the specified plugin type.

=item B<--boilerplate> I<file>

=item B<-b> I<file>

Include the specified file as preamble in all generated files.

Certain format strings will be honored, such as:

  %%  A literal %.
  %c  The class name.
  %C  The qualified class name.
  %d  The date and time of generation of the plugin.
  %f  The basename of the file in which the boilerplate is
        included.
  %F  The fully-qualified path of the file in which the
        boilerplate is included.
  %n  The qualification (namespace chain) of the class (:: if empty).
  %p  The product whence came cetskelgen
  %P  The product whence came the plugin information.
  %t  The type of plugin generated.
  %u  The login name of the invoker of cetskelgen.
  %U  The full name (if available) if the invoker of cetskelgen, or
        the login name if not.
  %v  The version of the package whence came cetskelgen.
  %V  The version of the package whence came the plugin information.

Literal % characters may also be escaped (\%).

If the boilerplate file is not specified cetskelgen will interrogate an
environment variable, "CETSKEL_BOILERPLATE" and attempt to include the
file specified. If that is also not found, cetskelgen will use an internal
default.

See also B<--impl-boilerplate>, below.

=item B<--entry-list> I<file>

=item B<-E> I<file>

Specify a file containing a list, one per line, of desired member
functions or data for the class to be generated. This list will be OR-ed
with any specified on the command line (see -e, below)

=item B<--entries> I<entry>+

=item B<--entry> I<entry>+

=item B<-e> I<entry>+

Specify optional member functions or data. A recognized entry will be
put in with the correct siganture; a non-recognized entry (member
function, for example) will be put in the private section as either a
member function or member data depending on the presence of
parentheses. For example,

-e beginJob -e endJob -e reconfigure
-e "bool doPrivateStuff(T1 const &t1, T2 const &t2)"
-e "std::vector<int> privateData_"

=item B<--force>

=item B<-f>

Force overwrite of existing files; the default is to not overwrite.

=item B<guard> I<header-guard-spec>

The specification for the header guard. '%' format specifiers are
honored, as are the Perl-regex directives \U, \L and \E. Ignored unless
the --split option is used. The environment variable
CETSKEL_HEADER_GUARD will be interrogated in the absence of this option,
and failing, that the default will be the header file's path from
package-top. See the documentation for B<--boilerplate> above for
information about substitutions.

=item B<--header-loc> I<path>

The path part of the header include directive for the class definition
(eg art/Framework/Core). Ignored unless the --split option is used.

=item B<--impl-boilerplate> I<file>

Boilerplate specifically for placement prior to the implementation of
the plugin. In the separate-file mode of operation, the standard
boilerplate will be omitted from the implementation code.  The
environment variable CETSKEL_IMPL_BOILERPLATE will be interrogated in
the absence of this option. See the documentation for B<--boilerplate>
above for information about substitutions.

=item B<--output-dir> I<dir>

=item B<--dir> I<dir>

=item B<-d> I<dir>

Place the generated output files in the specified directory instead of
the current one. Note that in the case of split files (see B<--split>
below), the path will not be reflected in the #include statement of the
header in the .cxx and .cc files. To specify a path (usually relative to
the top of the package) in the #include statement, use the
-B<--header-loc> option.

=item B<--split>

Produce three files: I<class-name>.h, <class-name>I<ext> and
I<class-name>_<plugin-suffix>.cc (note you must supply the period
yourself). The default behavior is to produce one file only:
I<class-name>_<plugin-suffix>.cc.

One complication of using this option is that, in order to properly
specify the header location (I<package>/[I<dir>]+) as required by the
implementation and plugin registration files, you will need to use the
B<--header-loc> option described above.

Before you use this item, note that there are several advantages to the
one-file philosophy in this case:

=over

=item 1.

The only communication with a plugin should be via the run, the subrun
and/or the event. Having the class definition in the same file as its
implmenetation helps enforce this.

=item 2.

When both the plugin implementation and the plugin macro invocation are
in the <name>_<plugin-suffix>.cc file, then the plugin library contains
all the plugin implementation code and its dependencies are separate
from the dependencies of code in the package's general code
library. This makes for easier maintenance of package dependencies.

The default value of I<ext> is ".cxx" unless changed with
B<--split-ext>, below.

=back

=item B<--split-ext> I<ext>

Change the extension of the class implemenation file from .cxx to
I<ext>. Specifying this option automatically implies --split.

=item B<--verbose>

=item B<-v>

Print some extra messages about functions generated, etc.

=back

=cut
