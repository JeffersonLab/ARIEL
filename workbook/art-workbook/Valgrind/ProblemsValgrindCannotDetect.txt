- Problems that valgrind memcheck cannot detect

-- ex12.cc -- 

Memory overwrite on stack variables

#include <iostream>
using namespace std;

class Point {
private:
  double x_;
  double y_;
  double z_;
public:
  Point() : x_(3.0) , y_(5.0) , z_(9.0) {}
  double y() const { return y_; }
  void y(double const val) { y_ = val; }
  void print() const {
    cout << "x_: " << x_ << endl;
    cout << "y_: " << y_ << endl;
    cout << "z_: " << z_ << endl;
  }
};

int
main()
{
  Point p1;
  Point p2;
  double a[] = { 42.0 };
  // Show our variables.
  cout << "p1:" << endl;
  p1.print();
  cout << "-----" << endl;
  cout << "p2:" << endl;
  p2.print();
  cout << "-----" << endl;
  cout << "a:" << endl;
  for (auto val : a) {
    cout << val << endl;
  }
  // Now overwrite p1 and p2 by
  // going past the end of a.
  for (auto I = 0; I < 5; ++I) {
    a[I] = 53.0;
  }
  // Show our variables again.
  cout << "-----" << endl;
  cout << "p1:" << endl;
  p1.print();
  cout << "-----" << endl;
  cout << "p2:" << endl;
  p2.print();
  cout << "-----" << endl;
  cout << "a:" << endl;
  for (auto val : a) {
    cout << val << endl;
  }
  return 0;
}

$ valgrind --leak-check=no ./ex12
==24751== Memcheck, a memory error detector
==24751== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==24751== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==24751== Command: ./ex12
==24751== 
p1:
x_: 3
y_: 5
z_: 9
-----
p2:
x_: 3
y_: 5
z_: 9
-----
a:
42
-----
p1:
x_: 3
y_: 5
z_: 9
-----
p2:
x_: 53
y_: 53
z_: 53
-----
a:
53
==24751== 
==24751== HEAP SUMMARY:
==24751==     in use at exit: 0 bytes in 0 blocks
==24751==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==24751== 
==24751== For a detailed leak analysis, rerun with: --leak-check=full
==24751== 
==24751== For counts of detected and suppressed errors, rerun with: -v
==24751== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 5 from 5)


