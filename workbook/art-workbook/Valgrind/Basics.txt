- Basics

- Running the memcheck tool.

Ok, time for our first example.

We need to setup the products we are going to use:

$ setup gcc v4_9_2
$ setup gdb
$ setup valgrind

Let's start with a simple example, we will run vex01,
which allocates an int and never releases it, under
the control of the memcheck tool.

$ valgrind --leak-check=full --show-leak-kinds=all ./vex01

The memcheck tool is the default tool in the valgrind suite,
so we do not need to select it explicitly.

We are asking the tool to search for all kinds of memory leaks,
and to show all of them to us.

The output looks like this:

==22820== Memcheck, a memory error detector
==22820== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==22820== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==22820== Command: ./vex01
==22820== 
==22820== 
==22820== HEAP SUMMARY:
==22820==     in use at exit: 4 bytes in 1 blocks
==22820==   total heap usage: 1 allocs, 0 frees, 4 bytes allocated
==22820== 
==22820== 4 bytes in 1 blocks are definitely lost in loss record 1 of 1
==22820==    at 0x4A07E05: operator new(unsigned long) (vg_replace_malloc.c:324)
==22820==    by 0x400639: main (vex01.cc:10)
==22820== 
==22820== LEAK SUMMARY:
==22820==    definitely lost: 4 bytes in 1 blocks
==22820==    indirectly lost: 0 bytes in 0 blocks
==22820==      possibly lost: 0 bytes in 0 blocks
==22820==    still reachable: 0 bytes in 0 blocks
==22820==         suppressed: 0 bytes in 0 blocks
==22820== 
==22820== For counts of detected and suppressed errors, rerun with: -v
==22820== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)

- Interpreting the output.

The first thing we notice is that all lines of output
from the tool are prefixed with the process number the
program is executing under.

The first thing that is printed is a banner telling us
that we are running the memcheck tool, the version
number of the valgrind suite, and what program we are
running.

Next would be the output of the code intermixed with
any error reports from memcheck, but this example
has no output and causes no error reports either.

When the program terminates, memcheck performs a leak
check, and the findings of that check are reported
starting with the HEAP SUMMARY.

This tells us how many memory blocks from the heap
were still allocated at program exit, and what the
total memory usage of those blocks is.

Following that is a series of loss record reports.
These show us a summary of each detected memory
leak, in terms of the number of blocks leaked, the
toal bytes leaked, and a stack trace showing how
the memory was originally allocated.

There is one loss record per unique stack trace.
So if a particular call sequence is used to allocate
many blocks of memory, it would be reported as a
single loss record with a high count of blocks
leaked.

In our particular example here we have a report
of 1 block leaked for a total of 4 bytes, the size
of an integer.

The allocation happened on line 10 of vex01.cc,
which is the "auto p = new int;" line.
 
