#!/bin/bash
#
# Ensure the existence of an output directory outside of cwd
# and ensure an link to it in cwd.
#
#  1) If ART_WORKBOOK_OUTPUT is defined, it is the output directory and the cwd
#     will contain a link to it, named output.
#
#  2) If 1) is not satisfied, and if ART_WORKBOOK_OUTPUT_BASE is defined,
#     then the output direcotry will be
#     ${ART_WORKBOOK_OUTPUT_BASE}/$(whoami)/art_workbook_output
#     and the cwd will contain a link to it, named output.
#
#  3) If neither 1 nor 2 are satisfied then check to see if there is already
#     a link named output in the cwd; if not it is an error.
#
# If output is not a link to a directory, but is itself a directory, this is
# dangerous - a clean build will delete its contents
#

prog=${0##*/}

# The directory that will hold the output files; determined using the rules described above.
actual_output_dir=""

# The working directory into which the link will be added.
# It is the cwd of the user doing the exercises but not the cwd when this script runs!
working_dir="${1}"

# The path to the symlink that we will make.
link_name=${working_dir}/output

# One of these environment variables must be defined or there must already
# be a symlink named output in the working directory.
if [[ -n "${ART_WORKBOOK_OUTPUT}" ]]; then
  actual_output_dir="${ART_WORKBOOK_OUTPUT}"
elif [[ -n "${ART_WORKBOOK_OUTPUT_BASE}" ]]; then
  actual_output_dir=${ART_WORKBOOK_OUTPUT_BASE}/$(whoami)/art_workbook_output
elif [[ -d "${link_name}" ]] && [[ -h "${link_name}" ]]; then
  echo "The symbolic link output already exists and will be used"
  exit 0
elif [[ ! -d "${link_name}" ]] && [[  -h "${link_name}" ]]; then
 cat 1>&2 <<EOF

The current working directory contains a symbolic link named output.
That link does not point to an existing directory.
Please fix this and rerun buildtool.

EOF
  exit 1
elif [[ -d "${link_name}" ]] && [[ ! -h "${link_name}" ]]; then
 cat 1>&2 <<EOF

The current working directory contains a subdirectory named output.
If you do a clean build this directory and its contents will be deleted.

Please make an output directory outside of this heirarchy and do:
ln -s <real_directory> output
where you replace <real_directory> with the name of your real output directory.

Then rerun buildtool.

EOF
  exit 1
else
 cat 1>&2 <<EOF

Unable to find the output directory.  See the instructions for the 3 options that are
available.  The short version is that you must do one of:
  1) Define ART_WORKBOOK_OUTPUT
  2) Define ART_WORKBOOK_OUTPUT_BASE
  3) Create an output directory outside of this heirarchy and make a sym link to it, named output.

Please fix this and rerun buildtool.
EOF
  exit 1
fi

# Make relative paths have the expected behaviour.
if [[ ! ${actual_output_dir} = /* ]]; then
  actual_output_dir=${working_dir}/${actual_output_dir}
fi

# Check that the output directory exists; if not make it.
if [[ ! -d "${actual_output_dir}" ]]; then
   if [[ ! -e "${actual_output_dir}" ]]; then
     mkdir -p ${actual_output_dir}
     echo "Making: " ${actual_output_dir}
   else
     echo "The file ${actual_output_dir} exists but is not a directory"
     echo "Please remove/rename it and retry"
     exit 1
   fi
fi

function usage() {
    cat 1>&2 <<EOF
usage: ${prog}
EOF
  exit 1
}

function link() {
  ln -sf "${actual_output_dir}" "${link_name}"
}

if [[ -z "${working_dir}" ]]; then
    usage
elif [[ ! -d "${working_dir}" ]]; then
  echo "Specified directory ${working_dir} is not a directory." 1>&2
  exit 1
elif [[ ! -w "${working_dir}" ]]; then
  echo "Specified directory ${working_dir} is not writable." 1>&2
  exit 1
fi

if [[ -e "${link_name}" ]]; then
  if [[ ! -L "${link_name}" ]]; then
    echo "$link exists, but is not a link!" 1>&2
    echo "Please move or delete this file and retry." 1>&2
    exit 1
  elif [[ $(readlink "${link_name}") !=  "${actual_output_dir}" ]]; then
    echo "Refreshing output sym link to ${actual_output_dir}" 1>&2
    rm -f "${link_name}"
    link
  fi
else
  link
fi

exit 0
