# NO USER-SERVICEABLE PARTS BELOW.
#
# There should be as little as possible here,
# with most of the heavy lifting done by other small scripts
#
# When sourcing this file from a script, you may have to tell this
# source file where it is via the fw_db shell (or env) variable.
# I.e.:
#    set fw_db=/some/path; source /some/path/this_file
# or  fw_db=/some/path; . /some/path/this_file

test $?shell = 1 && set ss=csh || ss=sh
#echo Shell type is $ss.

# make some things similar. need to use set_ because sh builtin set would hide function set
# Note: perhaps the trickiest thing in this file is the sh set_ function tries to return the same status
#       as at the start of the function (which most likely is the result of a back-tick expression
test "$ss" = csh && alias set_ set && alias vecho_ 'if ($?vv == 1) echo \!*' || eval 'vecho_() { test -n "${vv-}" && echo "$@"; return 0; }'
test "$ss" =  sh && eval 'set_() { sts=$?;for xx in "$@";do var=`expr "$xx" : "\([^=]*\)"`;val=`expr "$xx" : "[^=]*=\(.*\)"`;eval "$var=\"$val\"";done;return $sts; }'
test "$ss" =  sh && eval 'setenv() { export $1;eval "$1=\"\${2-}\""; }; source() { file=$1; shift; . $file "$@"; }; unsetenv_() { unset "$@"; }'
test "$ss" =  sh && eval 'tnotnull() { eval "test -n \"\${$1-}\""; }'                             && eval 'nullout() { "$@" >/dev/null 2>&1; }'
test "$ss" = csh && alias tnotnull "eval '"'test $?'"\!* -eq 1' && eval '"'test -n "$'"\!*"'"'"'" && alias nullout "\!* >& /dev/null" && alias unsetenv_ unsetenv
test "$ss" = csh && alias return exit

# make sure we know where this script lives
# now if we were passed a path or if not, we can figure it out (maybe if we are interactive)
#   bash, zsh, ksh and tcsh pass params to a source file, csh does not. but someone will be writing csh scripts
set_ msg2='Please set shell or env. variable fw_db (to be the path to the framework source code). Fix this and other errors may go away.'
tnotnull fw_db && set_ db=`sh -c "cd $fw_db >/dev/null 2>&1 && pwd"` && vecho_ 'setting db from fw_db variable' || set_ db=

test -z "$db" && tnotnull BASH_SOURCE && set_ me=`dirname $BASH_SOURCE` && set_ db=`sh -c "cd $me >/dev/null 2>&1 && pwd"` && vecho_ 'setting db via BASH_SOURCE'

# history is applicable only for interactive t/csh
test -z "$db" -a "$ss" = csh && test $?history = 0 && set history=5  # make sure history 1 works
test -z "$db" -a "$ss" = csh && set me=`history 1|sed 's/^[     0-9:]*//'` && test -n "$me" && set me=`dirname $me[2]` \
    && set db=`sh -c "cd $me >/dev/null 2>&1 && pwd"` && vecho_ 'setting db via interactive history'
#echo This script lives in $db

test -z "$db" && echo "$msg2" || vecho_ "db=$db"
test -n "$db" && setenv CETPKG_SOURCE `dirname $db`

# make sure we know the current directory
setenv CETPKG_BUILD `pwd`

echo The working build directory is $CETPKG_BUILD
echo The source code directory is $CETPKG_SOURCE

# add lib to LD_LIBRARY_PATH
set_ osname=`uname -s`
test -d "$CETPKG_BUILD/lib" || mkdir -p "$CETPKG_BUILD/lib"
test $osname = "Darwin" && setenv DYLD_LIBRARY_PATH "`echo :${DYLD_LIBRARY_PATH}: | sed -e "s|:${CETPKG_BUILD}/lib:|:|" -e 's|^:||;s|:$||'`"
test $osname = "Darwin" && setenv DYLD_LIBRARY_PATH "${CETPKG_BUILD}/lib:${DYLD_LIBRARY_PATH}"
test $osname = "Darwin" && setenv DYLD_LIBRARY_PATH `dropit -D -p "$DYLD_LIBRARY_PATH"`
test $osname = "Darwin" || setenv LD_LIBRARY_PATH "`echo :${LD_LIBRARY_PATH}: | sed -e "s|:${CETPKG_BUILD}/lib:|:|" -e 's|^:||;s|:$||'`"
test $osname = "Darwin" || setenv LD_LIBRARY_PATH "${CETPKG_BUILD}/lib:${LD_LIBRARY_PATH}"
test $osname = "Darwin" || setenv LD_LIBRARY_PATH "`dropit -D -p "$LD_LIBRARY_PATH"`"
tnotnull CET_PLUGIN_PATH && setenv CET_PLUGIN_PATH "${CETPKG_BUILD}/lib:${CET_PLUGIN_PATH}"
tnotnull CET_PLUGIN_PATH || setenv CET_PLUGIN_PATH "${CETPKG_BUILD}/lib"
tnotnull DYLD_LIBRARY_PATH && test $osname = "Darwin" && setenv CET_PLUGIN_PATH "${CET_PLUGIN_PATH}:${DYLD_LIBRARY_PATH}"
tnotnull LD_LIRBARY_PATH && test $osname = "Darwin" || setenv CET_PLUGIN_PATH "${CET_PLUGIN_PATH}:${LD_LIBRARY_PATH}"
setenv CET_PLUGIN_PATH "`dropit -D -p "${CET_PLUGIN_PATH}"`"
# report library path
test $osname = "Darwin" && echo $CETPKG_BUILD/lib has been added to DYLD_LIBRARY_PATH and CET_PLUGIN_PATH
test $osname = "Darwin" || echo $CETPKG_BUILD/lib has been added to LD_LIBRARY_PATH and CET_PLUGIN_PATH
# set ROOT_INCLUDE_PATH
setenv ROOT_INCLUDE_PATH `echo :${ROOT_INCLUDE_PATH}: | sed -e "s|:${CETPKG_BUILD}:|:|" -e 's|^:||;s|:$||'`
setenv ROOT_INCLUDE_PATH ${CETPKG_BUILD}:${ROOT_INCLUDE_PATH}
echo $CETPKG_BUILD has been added to ROOT_INCLUDE_PATH
tnotnull CETPKG_SOURCE && setenv ROOT_INCLUDE_PATH ${CETPKG_SOURCE}:${ROOT_INCLUDE_PATH}
setenv ROOT_INCLUDE_PATH `dropit -D -p $ROOT_INCLUDE_PATH`
echo $CETPKG_SOURCE has been added to ROOT_INCLUDE_PATH
# cleanup
unset osname

# add bin to path
test -d "$CETPKG_BUILD/bin" || mkdir -p "$CETPKG_BUILD/bin"
tnotnull CETPKG_BUILD && setenv PATH `echo :${PATH}: | sed -e "s|:${CETPKG_BUILD}/bin:|:|" -e 's|^:||;s|:$||'`
tnotnull CETPKG_BUILD && setenv PATH "${CETPKG_BUILD}/bin:${PATH}"
setenv PATH `dropit -D`
echo $CETPKG_BUILD/bin has been added to PATH

# set FHICL_FILE_PATH
fcldir=`cet_report fcldir_base ${CETPKG_SOURCE}/ups`
tnotnull FHICL_FILE_PATH || setenv FHICL_FILE_PATH '.'
test "$fcldir" = "DEFAULT" && setenv fcldir 'fcl'
test "$fcldir" = "NONE" && unset fcldir
tnotnull fcldir && setenv FHICL_FILE_PATH ".:${CETPKG_BUILD}/${fcldir}:${FHICL_FILE_PATH}"

# Specific to workbook project: also need path to toyExperiment's FHICL files
tnotnull ARIEL && setenv FHICL_FILE_PATH "${FHICL_FILE_PATH}:${ARIEL}/share/toyExperiment"

setenv FHICL_FILE_PATH "`dropit -D -p "$FHICL_FILE_PATH"`"
echo FHICL_FILE_PATH is now ${FHICL_FILE_PATH}

# cleanup before exiting
test "$ss" = csh && unalias tnotnull nullout set_ vecho_ return
unset ss db me thisdir msg1 msg2 msg3 msg4 msg5 setup_fail
unset set_ setenv unsetenv_ tnotnull nullout vecho_
