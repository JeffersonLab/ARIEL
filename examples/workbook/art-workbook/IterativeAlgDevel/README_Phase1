##############################################
#                                            #
#  Iterative Algorithm Development           #
#                                            #
#  Phase 1                                   #
#                                            #
##############################################

For this session, we are working with the 'MakeCombinations' producer
module.  The input for this producer is a collection of
previously-created 'FittedHelixData' objects. A 'FittedHelixData' is a
geometric object; it represents a helix in 3-d space. From each of
these we create a local, temporary 'FittedHelix' object, which
provides the ability to give a track momentum and uncertainty, given
mass to be assigned to the track.  'FittedHelix' is not a data product
because it knows about non-event-data information, such as the
magnetic field.

The purpose of the producer is to construct combinations of tracks,
forming neutral particle "hypotheses". Thus it is only interesting to
join tracks of opposite charge. The combination of the tracks yields a
4-momentum and uncertainty for the resulting combined track. We
histogram the distribution of the resultant masses, as well as their
uncertainties and the distribution of "pulls".

The purpose of this session is to do some iterative algorithm
development, to obtain practice in (1) refining existing code to
improve clarity and reduce the chance for bugs, (2) making code
testable to reduce the chance for bugs -- now, and after future
changes from others, and (3) extending code for greater generality and
flexibility.

As is often the case for development efforts, we are starting with an
initial body of code (the 'produce' function) that has been put
together to some level of functionality, and which has grown in such a
way as to be inconvenient to proceed. The starting code is not yet
functionally complete! In particular, it is not yet creating the data
product, because we haven't defined that class yet. We're going to
refine the code in several steps before extending it to complete the
desired functionality.

For these exercises, we have provided "answers" with which you can
compare your work.  When moving to the next part of the exercises, you
will take the answer from the previous part as your starting point.
This is so that everyone has a common starting point.


#=============================================
Part 1: Introducing the RecoTrk class
#=============================================

You will start with: MakeCombinationsV1_module.cc.

To understand the general structure, look at the code for the
'produce' function. The structure can be seen by looking at the
comments.

[1.1]  First, run the job
       
           art -c fcl/IterativeAlgDevel/iterV1.fcl
       
       and look at the output ('output/iterV1.root') interactively
       through ROOT.  Get a feeling for the numbers in the statistics
       box of each histogram.  You'll be comparing against these in
       the future.
       
       For the exercises in this session, we will be looking at these
       histograms as a means of detecting errors due to software
       changes.  Using physically interesting quantities to detect such
       problems constitutes a "physics validation" test.  While such
       tests are necesssary, such tests do not test directly test the
       algorithms that are used.  Rather, it's a conflation of many
       different potential sources for error.  Throughout this session
       we will implement some "unit tests", that validate the code
       itself.
       
[1.2]  Now look at the code.  Note that 'HepLorentzVector' and
       'HepSymMatrix' always occur in pairs, and they are always
       constructed using the same pattern.  Since these objects
       represent quantities intrinsic to the concept of a track, they
       should be encapsulated by a track type, which we will call
       'RecoTrk'.  Similarly, the quantities we are interested in at
       the end 'm' and 'sigm' are intrinsic to the track.  The
       calculation of these quantities should be contained in 'RecoTrk'
       as well.
       
       N.B. 'mpull' should remain apart from RecoTrk.  Why?
       
       Develop the 'RecoTrk' class (with the filename RecoTrk.h in this
       directory) place it in a namespace other than 'tex'.  It should
       look like:
       
          namespace <CHOOSE SOMETHING> {
       
            class RecoTrk {
            public:
       
              RecoTrk( CLHEP::HepLorentzVector const& p,
                       CLHEP::HepSymMatrix const& m );
       
              CLHEP::HepLorentzVector const& momentum();
              CLHEP::HepSymMatrix const& momentumCov();
       
              double sigmaMass();
       
              RecoTrk& operator+=(RecoTrk const&);
       
            private:
       
              // data members here
       
            };
       
            inline RecoTrk operator+(RecoTrk const& l, RecoTrk const&r){
              // code
            }
            // why does this need to be inline?
       
          }

[1.3]  Provide the implementation for the above-declared functions.
       
[1.4]  The desired quantities at the end are the variables being
       plotted 'm', 'sigm', and 'mpull', and the combined RecoTrk
       object.  Replace the code in MakeCombinationsV1 with the
       appropriate RecoTrk objects so that the details are hidden in
       the RecoTrk implementation.
       
[1.5]  Recompile the code and rerun the job:
       
            art -c fcl/IterativeAlgDevel/iterV1.fcl -T output/iterV1_b.root
       
       Verify that the output histograms in 'output/iterV1_b.root' are
       the same as those you got in 'output/iterV1.root'.


#=============================================
Part 2: Placing the product on the event 
#=============================================

Now we will create the product that will be put into the event.

[2.0]  Perform the following:
        
            cp answers/v1/* ./
        
[2.1]  We would like to keep the collection of track combinations, and
       information pointing to their constituents'
       FittedHelixDataCollection information.  Since the constituents
       are already available from the input source file, there is no
       need to save the full constituent information.  In that case, we
       can store an index into that collection through the use of
       art::Ptr<FittedHelixData>().
       
       You have just cp'd classes -- called 'CombinationCollection' and
       'Combination' -- that do this for you.  
       
       Look in the "Combination.*" files and place the appropriate
       namespace name where instructed.
       
       Look in the 'classes_def.xml' file and follow the instructions.
       
[2.2]  Recompile the code and make sure the correct dictionary is
       generated.
        
[2.3]  Using these 'Combination' and 'CombinationCollection' classes,
       fill the product and then place it onto the event.
       
[2.4]  Lastly, you'll need to adjust the .fcl file so that an output
       module is included in a path.  Make the output fileName be
       "output/allEventsV1.art".
       
[2.5]  Run the job.
       
           art -c fcl/IterativeAlgDevel/iterV1.fcl -T output/iterV1_b.root
       
[2.6]  Verify that the histograms are the same as before, and check
       that the data product has been written to the file with the
       command:
       
           art -c fcl/FileDumper/fileDumper.fcl output/allEventsV1.root -n 1


#=============================================
Part 3: Testing RecoTrk
#=============================================

At this point, the module has been completed, creating products that
are usable by downstream modules and can be written to data files.
For now, though, the only means of testing the code is through the
physics validation test as described before.  To verify that the
RecoTrk class behaves as intended we will create a unit test that
checks whether the statement

   RecoTrk trk3 = trk1 + trk2;

results in a RecoTrk object with properties that we expect.

[3.1]  Open the 'TestRecoTrk.cc' file, and replace the namespace
       placeholder with the namespace that contains your RecoTrk
       object.

[3.2]  First we will execute a unit test where the 'main' function is
       empty.  This is just to introduce you to how the setup works.
       
       To add a unit test, open up the
       IterativeAlgDevel/CMakeLists.txt file.  At the bottom of it,
       you will need to include the following code
       
          include(CetTest)

          cet_test(TestRecoTrk 
                   LIBRARIES art-workbook_IterativeAlgDevel 
                   OPTIONAL_GROUPS IterativeAlgDevel)

[3.3]  Recompile art-workbook.

[3.4]  Execute the test:

          buildtool -t --test-groups=IterativeAlgDevel 
          
          OR
          
          ctest -D CET_TEST_GROUPS=IterativeAlgDevel

       You should see something like:

             Start 1: TestRecoTrk
             1/1 Test #1: TestRecoTrk ......................   Passed    0.11 sec
             
             100% tests passed, 0 tests failed out of 1
             
             Total Test time (real) =   0.11 sec

[3.5]  Go back into 'TestRecoTrk' and fill in the missing
       components.  We are testing for two things:

       (a) that the combined momentum is what we would expect, and
       (b) that the combined matrix is what we would expect

       Create 'trk1' and 'trk2', initializing them with
       straightforward-enough vectors and matrices so that you can
       predict what the combined vector and matrix should be.  Your
       predicted vector and matrix (the references) will need to be
       explicitly created and inserted in the right place.

       Run the test, and make sure you get the same output as before.

[3.6]  If the test fails, fix it.


#=============================================
Part 4 (optional): Replacing constants
#=============================================

Notice that the masses for the kaons and phi are hardcoded.  An
interface exists in the toyExperiment package for accessing these
values without hardcoding them.  Figure out how to adjust the
hardcoded parameters by introducing

   #include "toyExperiment/PDT/PDT.h"

and by using the correct function calls.  Why can't you just create an
instance of 'PDT'?
