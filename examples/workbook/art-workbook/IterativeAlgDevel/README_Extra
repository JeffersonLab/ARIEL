##############################################
#                                            #
#  Iterative Algorithm Development           #
#                                            #
#  Advanced exercises                        #
#                                            #
##############################################

#=============================================
Extra 1: Histogramming via lambdas
#=============================================

At this point, we have a fully fledged, factorized, and testable
algorithm.  One of the annoyances, however, is that we have introduced
an inefficiency by separating the histogramming step from the track
combining step.  It is possible to recover some of this efficiency by
passing the histogramming lambda (from Phase 3, part 2) directly to
the 'makeCombinationsAlg' function.

[1.1]  Adjust the 'makeCombinationsAlg' from the Phase 3, part 1 so
       that it can receive a lambda.

       To do this, you will need to turn the algorithm into a function
       template.

[1.2]  Have the algorithm pass the lambda the combined RecoTrk object.
       You'll need to modify the lambda signature in the
       MakeCombinations modules.

[1.3]  Recompile, run all of the unit tests, and rerun the job,
       verifying that you get the same histogram output as before.

[ The solutions can be found in answers/v7/. ]

#=============================================
Extra 2: Parallel 'for'
#=============================================

As we mentioned at the end of Phase 3, part 1, the improved
'makeCombinationsAlg' function is now structured in a way so that it
can be straightforwardly extended to use parallel algorithms.  We will
illustrate that in this exercise.

For this exercise we will use the GNU parallel facilities.  

[2.1]  Run a unit test where you create 10,000 positive FittedHelixData
       objects, and 10,000 negative FittedHelixData objects.  How long
       does it take?

We will now change to a parallel algorithm.  Follow the instructions
for the particular algorithm you wish to use:

https://gcc.gnu.org/onlinedocs/gcc-4.9.0/libstdc++/manual/manual/parallel_mode.html

[2.2] Change the 'makeCombinationsAlg' function so that the
      std::vector<CombinationData> object is filled using a
      parallel-for.

      For this exercise, you MUST NOT explicitly call
      std::vector<T>::push_back or std::vector<T>::emplace_back().
      (Why?)  Rather, you will need to use an alternate method, namely
      one provided by the standard.

[2.3]  To compile, you will need to add the following to the
       'IterativeAlgDevel/CMakeLists.txt' file:

           include(SetCompilerFlags)
           cet_add_compiler_flags(CXX -fopenmp -march=native)

       Compile the code and rerun the test.  Do you see any
       improvement in execution time?
