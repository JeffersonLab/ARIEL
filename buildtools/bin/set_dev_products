#!/usr/bin/env perl
#
# setup products for the build environment
# use product_deps and qualifier_deps

# we need to know the qualifiers
# -d, -o, or -p and 1-2 other qualifiers

# cetbuildtools must already be setup by setup_for_development
# create a temporary file and return the temporary file name for use by setup_for_development

use File::Basename;
use lib dirname($0);

use parse_deps;

use strict;
use warnings;

1;

if ( $#ARGV < 2 ) {
  setup_error("problem_report1",
              "directory and qualifiers not specified",
              "USAGE: set_dev_products <input-directory> <output-directory. <-d|-o|-p> <qualifiers>");
}

my $i;
my $j;
my $k;

my $sourcedir = $ARGV[0];
my $builddir = $ARGV[1];
my $noarch = "";
my $qual = "";
my $dop = "";
my $type = "";
my $qdir = "";
my $inputdir;
my $setup_cmds;
my $only_for_build_cmds;
my $input_qual = "";

for $i ( 2 .. $#ARGV ) {
  if ( $ARGV[$i] eq "-d" ) {
    $dop = "debug";
    $type = "Debug";
  } elsif ( $ARGV[$i] eq "-o" ) {
    $dop = "opt";
    $type = "Opt";
  } elsif ( $ARGV[$i] eq "-p" ) {
    $dop = "prof";
    $type = "Prof";
  } elsif ( $ARGV[$i] eq "noarch" ) {
    $noarch = "true";
    $type = "none"
  } else {
    #$qual = $qual.$ARGV[$i].":";
    #$qdir = $qdir.$ARGV[$i]."-";
    $input_qual = "$input_qual$ARGV[$i]:";
  }
}

# sort now

if ( $input_qual ) {
  $qual = sort_qual ( $input_qual );
  $qdir=$qual;
  $qdir =~ s/:/-/g;
}

# use this file for debugging
my $diagfl = $builddir."/diag_report";
open(DIAG, "> $diagfl") or die "Couldn't open $diagfl";

my $srcbase = basename($sourcedir);
if ( $srcbase eq "ups" ) {
  $inputdir = $sourcedir;
  ##print DIAG "set_dev_products debug info: have the old setup_for_development\n";
  setup_error("problem_report2",
              "you have an old copy of setup_for_development",
              "please issue the following command",
              "cp \$CETBUILDTOOLS_DIR/templates/setup_for_development.template $inputdir/setup_for_development");
} else {
  $inputdir = "$sourcedir/ups";
}
##print DIAG "set_dev_products debug info: source dir is $sourcedir\n";
##print DIAG "set_dev_products debug info: input dir is $inputdir\n";

my $pfile="$inputdir/product_deps";

if ( check_for_old_product_deps( $pfile ) ) {
  print DIAG "WARNING: you appear to be using an old product_deps with cetbuildtools v4 or later\n";
  print DIAG "WARNING: please issue the following command\n";
  print DIAG "WARNING: migrate-package '$ENV{CETPKG_SOURCE}'\n";
}

# as of cetbuildtools v4_13_00, UPS_OVERRIDE is only set by set_dev_products
my $sfile="$inputdir/setup_for_development";
if ( check_for_old_setup_files( $sfile ) ) {
  setup_error("problem_report3",
              "you have an old copy of setup_for_development",
              "please issue the following command",
              "cp \\\$CETBUILDTOOLS_DIR/templates/setup_for_development.template $inputdir/setup_for_development");
}
$sfile="$inputdir/setup_deps";
if ( -e $sfile ) {
  if ( check_for_old_setup_files( $sfile ) ) {
    setup_error("problem_report4",
                "you have an old copy of setup_deps",
                "please issue the following command",
                "cp \\\$CETBUILDTOOLS_DIR/templates/setup_deps.template $inputdir/setup_deps");
  }
}

# as of cetbuildtools v4_17_00, use noarch instead of simple for a null flavored product
$sfile="$inputdir/setup_for_development";
if ( check_for_old_noarch_setup_file( $sfile ) ) {
  setup_error("problem_report5",
              "you have an old copy of setup_for_development",
              "please issue the following command",
              "cp \\\$CETBUILDTOOLS_DIR/templates/setup_for_development.noarch.template $inputdir/setup_for_development");
}

my ($product, $version, $default_ver, $default_qual, $have_fq) = get_parent_info( $pfile );
if ( $qual ) {
  $qual = "${qual}:${dop}";
  $qdir = "${qdir}-${dop}";
} else {
  my $dq = find_default_qual( $pfile );
  if ( $dq ) {
    $qual = "${dq}:${dop}";
    $qdir = "${dq}-${dop}";
  } elsif ( $noarch ) {
    $qual = "-nq-";
  } else {
    setup_error("$builddir/error-$product-$version",
                "no qualifiers specified",
                "add a defaultqual line to $pfile",
                "or specify the qualifier(s) on the command line",
                "USAGE: set_dev_products <input-directory> <output-directory. <-d|-o|-p> <qualifiers>");
  }
}
#print DIAG "set_dev_products debug info: qual $qual\n";

my $tmpfl = "$builddir/$product-$version";
open($set_dev_products::TSET, "> $tmpfl") or die "Couldn't open $tmpfl";

my ($phash) = get_product_list( $pfile );
my ($ndeps, $qhash, $qqhash) = get_qualifier_matrix( $pfile, $set_dev_products::TSET );
my ($fwlen, $fwlist_ref, $fwdir_ref) = get_setfw_list( $pfile );
my @fwlist=@$fwlist_ref;

# check for compiler 
my $compiler = compiler_for_quals($qhash->{compiler}, $qual);

##print DIAG "set_dev_products debug info: compiler $compiler\n";

# now look up products in the hash

# Temporary variable connected as a filehandle.
open( $set_dev_products::SETUP_CMDS, ">", \$setup_cmds) or
  die "Could not open memory stream to variable SETUP_CMDS.";

# Second temporary variable connected as a filehandle.
open( $set_dev_products::ONLY_CMDS, ">", \$only_for_build_cmds) or
  die "Could not open memory stream to variable ONLY_CMDS.";

my $onlyForBuild="";
my $deps = prods_for_quals($phash, $qual);

foreach my $dep (keys %$deps) {
  my $dep_info = $deps->{$dep};
  my $dep_quals = $qhash->{$dep}->{$qual};
  next if (defined $dep_quals and $dep_quals eq "-"); # This product not needed.
  my $fh;
  if ($dep_info->{only_for_build}) {
    # only for build?
    $onlyForBuild="$dep;$onlyForBuild";
    next if $dep eq "cetbuildtools"; # Dealt with elsewhere.
    $fh = $set_dev_products::ONLY_CMDS;
  } else {
    unless ($dep_quals) { # Required for non-only_for_build products.
      setup_error("problem_report6",
                  "product list entry $dep has no column in the qualifier table.",
                  "please check \$CETPKG_SOURCE/ups/product_deps");
    }
    $fh = $set_dev_products::SETUP_CMDS;
  }
  print_dep_setup($dep, $dep_info, $dep_quals, $fh);
}
close($set_dev_products::SETUP_CMDS);
close($set_dev_products::ONLY_CMDS);

my $cetfl = cetpkg_info_file($product,
                             $version,
                             $default_ver,
                             $qual,
                             $type,
                             $sourcedir,
                             $builddir,
                             $compiler_table->{$compiler}->{CC},
                             $compiler_table->{$compiler}->{CXX},
                             $compiler_table->{$compiler}->{FC},
                             $onlyForBuild,
                            );

print $set_dev_products::TSET "tnotnull UPS_OVERRIDE || setenv UPS_OVERRIDE ''\n";
print $set_dev_products::TSET "expr \"x \$UPS_OVERRIDE\" : '.* -[^- 	]*B' >/dev/null || setenv UPS_OVERRIDE \"\$UPS_OVERRIDE -B\"\n";

print_setup_boilerplate($set_dev_products::TSET,
                        $product, $version, $noarch, $qual, $type, $compiler);

foreach $i ( 0 .. $fwlen ) {
  if ( $fwlist[$i]  eq  "ERROR" ) {
    print DIAG "set_dev_products: error in set_fwdir entry\n";
  } else {
    print $set_dev_products::TSET "setenv FW_SEARCH_PATH \${CETPKG_SOURCE}$fwlist[$i]:\${FW_SEARCH_PATH}\n";
  }
}

# setup only_for_build products first
if ( $only_for_build_cmds ) {
  print $set_dev_products::TSET $only_for_build_cmds;
}
# Now write the remaining setup commands.
if ( $setup_cmds ) {
  print $set_dev_products::TSET $setup_cmds;
}

close($set_dev_products::TSET);
print "$tmpfl\n";
close(DIAG);

exit 0;
